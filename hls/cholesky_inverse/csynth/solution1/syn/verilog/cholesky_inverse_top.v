// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="cholesky_inverse_top,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=35.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=30.588000,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=2,HLS_SYN_DSP=27,HLS_SYN_FF=2974,HLS_SYN_LUT=5415,HLS_VERSION=2018_2}" *)

module cholesky_inverse_top (
        ap_clk,
        ap_rst_n,
        A_address0,
        A_ce0,
        A_q0,
        InverseA_address0,
        InverseA_ce0,
        InverseA_we0,
        InverseA_d0,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 8'd1;
parameter    ap_ST_fsm_state2 = 8'd2;
parameter    ap_ST_fsm_state3 = 8'd4;
parameter    ap_ST_fsm_state4 = 8'd8;
parameter    ap_ST_fsm_state5 = 8'd16;
parameter    ap_ST_fsm_state6 = 8'd32;
parameter    ap_ST_fsm_state7 = 8'd64;
parameter    ap_ST_fsm_state8 = 8'd128;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] InverseA_address0;
output   InverseA_ce0;
output   InverseA_we0;
output  [31:0] InverseA_d0;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1:0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1:0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1:0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg A_ce0;
reg InverseA_ce0;
reg InverseA_we0;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [7:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [2:0] r_1_fu_168_p2;
reg   [2:0] r_1_reg_265;
wire    ap_CS_fsm_state2;
wire   [5:0] tmp_16_cast_fu_182_p1;
reg   [5:0] tmp_16_cast_reg_270;
wire   [0:0] tmp_fu_162_p2;
wire   [2:0] c_1_fu_192_p2;
reg   [2:0] c_1_reg_278;
wire    ap_CS_fsm_state3;
wire   [63:0] tmp_19_cast_fu_207_p1;
reg   [63:0] tmp_19_cast_reg_283;
wire   [0:0] tmp_2_fu_186_p2;
wire   [31:0] grp_cholesky_inverse_top_2_fu_156_ap_return;
reg   [31:0] inverse_OK_reg_293;
wire    ap_CS_fsm_state5;
wire    grp_cholesky_inverse_top_2_fu_156_ap_done;
wire   [2:0] r_2_fu_218_p2;
reg   [2:0] r_2_reg_300;
wire    ap_CS_fsm_state6;
wire   [5:0] tmp_18_cast_fu_232_p1;
reg   [5:0] tmp_18_cast_reg_305;
wire   [0:0] tmp_1_fu_212_p2;
wire   [2:0] c_2_fu_242_p2;
reg   [2:0] c_2_reg_313;
wire    ap_CS_fsm_state7;
wire   [63:0] tmp_20_cast_fu_257_p1;
reg   [63:0] tmp_20_cast_reg_318;
wire   [0:0] tmp_5_fu_236_p2;
reg   [3:0] a_i_address0;
reg    a_i_ce0;
reg    a_i_we0;
wire   [31:0] a_i_q0;
reg   [3:0] InverseA_assign_address0;
reg    InverseA_assign_ce0;
reg    InverseA_assign_we0;
wire   [31:0] InverseA_assign_q0;
wire   [3:0] grp_cholesky_inverse_top_2_fu_156_A_address0;
wire    grp_cholesky_inverse_top_2_fu_156_A_ce0;
wire   [3:0] grp_cholesky_inverse_top_2_fu_156_InverseA_address0;
wire    grp_cholesky_inverse_top_2_fu_156_InverseA_ce0;
wire    grp_cholesky_inverse_top_2_fu_156_InverseA_we0;
wire   [31:0] grp_cholesky_inverse_top_2_fu_156_InverseA_d0;
reg   [2:0] r_reg_112;
reg   [2:0] c_reg_123;
wire    ap_CS_fsm_state4;
reg   [2:0] r1_reg_134;
reg   [2:0] c2_reg_145;
wire    ap_CS_fsm_state8;
wire   [4:0] tmp_9_fu_174_p3;
wire   [5:0] tmp_4_cast_fu_198_p1;
wire   [5:0] tmp_11_fu_202_p2;
wire   [4:0] tmp_10_fu_224_p3;
wire   [5:0] tmp_6_cast_fu_248_p1;
wire   [5:0] tmp_12_fu_252_p2;
reg   [7:0] ap_NS_fsm;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 8'd1;
end

cholesky_inverse_top_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
cholesky_inverse_top_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .ap_return(inverse_OK_reg_293)
);

cholesky_inverse_ocq #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
a_i_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(a_i_address0),
    .ce0(a_i_ce0),
    .we0(a_i_we0),
    .d0(A_q0),
    .q0(a_i_q0)
);

cholesky_inverse_ocq #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
InverseA_assign_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(InverseA_assign_address0),
    .ce0(InverseA_assign_ce0),
    .we0(InverseA_assign_we0),
    .d0(grp_cholesky_inverse_top_2_fu_156_InverseA_d0),
    .q0(InverseA_assign_q0)
);

cholesky_inverse_top_2 grp_cholesky_inverse_top_2_fu_156(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .A_address0(grp_cholesky_inverse_top_2_fu_156_A_address0),
    .A_ce0(grp_cholesky_inverse_top_2_fu_156_A_ce0),
    .A_q0(a_i_q0),
    .InverseA_address0(grp_cholesky_inverse_top_2_fu_156_InverseA_address0),
    .InverseA_ce0(grp_cholesky_inverse_top_2_fu_156_InverseA_ce0),
    .InverseA_we0(grp_cholesky_inverse_top_2_fu_156_InverseA_we0),
    .InverseA_d0(grp_cholesky_inverse_top_2_fu_156_InverseA_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        c2_reg_145 <= c_2_reg_313;
    end else if (((tmp_1_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        c2_reg_145 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        c_reg_123 <= c_1_reg_278;
    end else if (((tmp_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        c_reg_123 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & (tmp_5_fu_236_p2 == 1'd1))) begin
        r1_reg_134 <= r_2_reg_300;
    end else if (((1'b1 == ap_CS_fsm_state5) & (grp_cholesky_inverse_top_2_fu_156_ap_done == 1'b1))) begin
        r1_reg_134 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_186_p2 == 1'd1))) begin
        r_reg_112 <= r_1_reg_265;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        r_reg_112 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        c_1_reg_278 <= c_1_fu_192_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        c_2_reg_313 <= c_2_fu_242_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        r_1_reg_265 <= r_1_fu_168_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        r_2_reg_300 <= r_2_fu_218_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        tmp_16_cast_reg_270[4 : 2] <= tmp_16_cast_fu_182_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_212_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_18_cast_reg_305[4 : 2] <= tmp_18_cast_fu_232_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_186_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        tmp_19_cast_reg_283[5 : 0] <= tmp_19_cast_fu_207_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_5_fu_236_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state7))) begin
        tmp_20_cast_reg_318[5 : 0] <= tmp_20_cast_fu_257_p1[5 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        InverseA_assign_address0 = tmp_20_cast_fu_257_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        InverseA_assign_address0 = grp_cholesky_inverse_top_2_fu_156_InverseA_address0;
    end else begin
        InverseA_assign_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        InverseA_assign_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        InverseA_assign_ce0 = grp_cholesky_inverse_top_2_fu_156_InverseA_ce0;
    end else begin
        InverseA_assign_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        InverseA_assign_we0 = grp_cholesky_inverse_top_2_fu_156_InverseA_we0;
    end else begin
        InverseA_assign_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        InverseA_ce0 = 1'b1;
    end else begin
        InverseA_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        InverseA_we0 = 1'b1;
    end else begin
        InverseA_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_address0 = tmp_19_cast_reg_283;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_i_address0 = grp_cholesky_inverse_top_2_fu_156_A_address0;
    end else begin
        a_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        a_i_ce0 = grp_cholesky_inverse_top_2_fu_156_A_ce0;
    end else begin
        a_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        a_i_we0 = 1'b1;
    end else begin
        a_i_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_1_fu_212_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_1_fu_212_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_162_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((1'b1 == ap_CS_fsm_state3) & (tmp_2_fu_186_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state5 : begin
            if (((1'b1 == ap_CS_fsm_state5) & (grp_cholesky_inverse_top_2_fu_156_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_1_fu_212_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            if (((1'b1 == ap_CS_fsm_state7) & (tmp_5_fu_236_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = tmp_19_cast_fu_207_p1;

assign InverseA_address0 = tmp_20_cast_reg_318;

assign InverseA_d0 = InverseA_assign_q0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign c_1_fu_192_p2 = (c_reg_123 + 3'd1);

assign c_2_fu_242_p2 = (c2_reg_145 + 3'd1);

assign grp_cholesky_inverse_top_2_fu_156_ap_done = 1'b0;

assign grp_cholesky_inverse_top_2_fu_156_ap_return = 32'd0;

assign r_1_fu_168_p2 = (r_reg_112 + 3'd1);

assign r_2_fu_218_p2 = (r1_reg_134 + 3'd1);

assign tmp_10_fu_224_p3 = {{r1_reg_134}, {2'd0}};

assign tmp_11_fu_202_p2 = (tmp_16_cast_reg_270 + tmp_4_cast_fu_198_p1);

assign tmp_12_fu_252_p2 = (tmp_18_cast_reg_305 + tmp_6_cast_fu_248_p1);

assign tmp_16_cast_fu_182_p1 = tmp_9_fu_174_p3;

assign tmp_18_cast_fu_232_p1 = tmp_10_fu_224_p3;

assign tmp_19_cast_fu_207_p1 = tmp_11_fu_202_p2;

assign tmp_1_fu_212_p2 = ((r1_reg_134 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_20_cast_fu_257_p1 = tmp_12_fu_252_p2;

assign tmp_2_fu_186_p2 = ((c_reg_123 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_4_cast_fu_198_p1 = c_reg_123;

assign tmp_5_fu_236_p2 = ((c2_reg_145 == 3'd4) ? 1'b1 : 1'b0);

assign tmp_6_cast_fu_248_p1 = c2_reg_145;

assign tmp_9_fu_174_p3 = {{r_reg_112}, {2'd0}};

assign tmp_fu_162_p2 = ((r_reg_112 == 3'd4) ? 1'b1 : 1'b0);

always @ (posedge ap_clk) begin
    tmp_16_cast_reg_270[1:0] <= 2'b00;
    tmp_16_cast_reg_270[5] <= 1'b0;
    tmp_19_cast_reg_283[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    inverse_OK_reg_293[31:0] <= 32'b00000000000000000000000000000000;
    tmp_18_cast_reg_305[1:0] <= 2'b00;
    tmp_18_cast_reg_305[5] <= 1'b0;
    tmp_20_cast_reg_318[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //cholesky_inverse_top
