// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cholesky_alt4 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        L_address0,
        L_ce0,
        L_we0,
        L_d0,
        ap_return
);

parameter    ap_ST_fsm_state1 = 13'd1;
parameter    ap_ST_fsm_state2 = 13'd2;
parameter    ap_ST_fsm_state3 = 13'd4;
parameter    ap_ST_fsm_state4 = 13'd8;
parameter    ap_ST_fsm_pp0_stage0 = 13'd16;
parameter    ap_ST_fsm_state7 = 13'd32;
parameter    ap_ST_fsm_state8 = 13'd64;
parameter    ap_ST_fsm_state9 = 13'd128;
parameter    ap_ST_fsm_state10 = 13'd256;
parameter    ap_ST_fsm_state11 = 13'd512;
parameter    ap_ST_fsm_state12 = 13'd1024;
parameter    ap_ST_fsm_state13 = 13'd2048;
parameter    ap_ST_fsm_state14 = 13'd4096;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] L_address0;
output   L_ce0;
output   L_we0;
output  [31:0] L_d0;
output  [31:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] A_address0;
reg A_ce0;
reg[3:0] L_address0;
reg L_ce0;
reg L_we0;
reg[31:0] L_d0;
reg[31:0] ap_return;

(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [31:0] prod_cast_to_off_dia_reg_253;
reg   [1:0] k_reg_263;
wire   [2:0] i_fu_335_p2;
reg   [2:0] i_reg_819;
wire    ap_CS_fsm_state2;
wire   [5:0] i_off_fu_435_p2;
reg   [5:0] i_off_reg_824;
wire   [0:0] exitcond4_fu_329_p2;
wire   [4:0] tmp_2_cast1_fu_441_p1;
reg   [4:0] tmp_2_cast1_reg_830;
reg   [3:0] A_addr_reg_835;
reg   [3:0] L_addr_reg_840;
wire   [1:0] j_fu_483_p2;
reg   [1:0] j_reg_848;
wire    ap_CS_fsm_state3;
wire   [0:0] exitcond3_fu_477_p2;
reg   [3:0] L_addr_1_reg_858;
wire   [5:0] indvars_iv_cast1_fu_512_p1;
reg   [5:0] indvars_iv_cast1_reg_863;
wire    ap_CS_fsm_state4;
wire  signed [4:0] j_sub1_cast20_cast_fu_522_p1;
reg  signed [4:0] j_sub1_cast20_cast_reg_868;
wire  signed [4:0] tmp_9_cast_fu_606_p1;
reg  signed [4:0] tmp_9_cast_reg_873;
reg   [3:0] L_addr_2_reg_878;
wire   [0:0] exitcond_fu_623_p2;
reg   [0:0] exitcond_reg_888;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state5_pp0_stage0_iter0;
wire    ap_block_state6_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [1:0] k_1_fu_629_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] grp_fu_288_p2;
reg    ap_enable_reg_pp0_iter1;
wire   [5:0] tmp_12_fu_683_p2;
reg   [5:0] tmp_12_reg_912;
wire    ap_CS_fsm_state7;
reg   [31:0] square_sum_1_reg_917;
wire    ap_CS_fsm_state8;
reg   [31:0] A_minus_sum_reg_922;
wire    ap_CS_fsm_state10;
wire   [0:0] tmp_25_fu_727_p2;
reg   [0:0] tmp_25_reg_928;
wire   [31:0] p_0_i_fu_733_p3;
reg   [31:0] p_0_i_reg_933;
wire   [1:0] tmp_26_fu_741_p1;
reg   [1:0] tmp_26_reg_938;
wire   [31:0] diag_internal_2_3_fu_784_p3;
wire    ap_CS_fsm_state14;
wire   [31:0] diag_internal_2_6_fu_800_p3;
wire   [31:0] diag_internal_2_8_fu_808_p3;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state5;
reg   [2:0] L_internal_address0;
reg    L_internal_ce0;
reg    L_internal_we0;
wire   [31:0] L_internal_q0;
wire   [2:0] L_internal_address1;
reg    L_internal_ce1;
wire   [31:0] L_internal_q1;
reg   [31:0] diag_internal_2_s_reg_169;
reg   [31:0] diag_internal_2_4_reg_181;
reg   [31:0] diag_internal_2_7_reg_193;
reg   [2:0] indvars_iv1_reg_205;
reg   [31:0] return_code_reg_217;
reg   [1:0] indvars_iv_reg_229;
wire    ap_CS_fsm_state9;
reg   [31:0] square_sum_reg_241;
wire    ap_block_pp0_stage0;
reg   [31:0] L_diag_recip_reg_274;
wire   [63:0] tmp_22_cast_fu_467_p1;
wire   [63:0] tmp_35_cast_fu_506_p1;
wire   [63:0] tmp_35_fu_618_p1;
wire  signed [63:0] tmp_15_fu_648_p1;
wire  signed [63:0] tmp_18_fu_663_p1;
wire  signed [63:0] tmp_13_fu_687_p1;
wire   [31:0] grp_fu_296_p2;
wire    ap_CS_fsm_state13;
wire   [31:0] new_L_fu_745_p3;
reg   [31:0] grp_fu_288_p0;
reg   [31:0] grp_fu_288_p1;
wire   [31:0] tmp_i_fu_306_p2;
reg   [31:0] grp_fu_296_p0;
reg   [31:0] grp_fu_296_p1;
wire   [31:0] tmp_16_fu_678_p1;
wire    ap_CS_fsm_state11;
wire  signed [2:0] i_sub1_fu_341_p2;
wire  signed [2:0] tmp_cast_fu_355_p0;
wire  signed [3:0] i_sub1_cast_fu_351_p1;
wire  signed [2:0] tmp_cast_fu_355_p1;
wire   [3:0] tmp_cast_fu_355_p2;
wire   [3:0] tmp_s_fu_361_p2;
wire   [3:0] p_neg_fu_375_p2;
wire   [2:0] tmp_7_fu_381_p4;
wire  signed [3:0] tmp_10_fu_391_p1;
wire   [4:0] p_lshr_fu_395_p1;
wire   [2:0] tmp_19_fu_405_p4;
wire  signed [3:0] tmp_20_fu_415_p1;
wire   [0:0] tmp_2_fu_367_p3;
wire   [4:0] p_neg_t_fu_399_p2;
wire   [4:0] p_lshr_f_fu_419_p1;
wire   [4:0] tmp_4_fu_423_p3;
wire  signed [5:0] i_sub1_cast1_fu_347_p1;
wire  signed [5:0] tmp_1_cast_fu_431_p1;
wire   [4:0] tmp_fu_449_p3;
wire   [5:0] tmp_2_cast_fu_445_p1;
wire   [5:0] tmp_21_cast_fu_457_p1;
wire   [5:0] tmp_21_fu_461_p2;
wire   [2:0] indvars_iv_cast_cast_fu_473_p1;
wire   [3:0] tmp_32_fu_489_p3;
wire   [4:0] tmp_34_cast_fu_497_p1;
wire   [4:0] tmp_33_fu_501_p2;
wire  signed [1:0] j_sub1_fu_516_p2;
wire  signed [1:0] tmp_7_cast_fu_530_p0;
wire  signed [2:0] j_sub1_cast_fu_526_p1;
wire  signed [1:0] tmp_7_cast_fu_530_p1;
wire   [2:0] tmp_7_cast_fu_530_p2;
wire   [2:0] tmp_8_fu_536_p2;
wire   [2:0] p_neg1_fu_550_p2;
wire   [1:0] tmp_28_fu_556_p4;
wire  signed [2:0] tmp_29_fu_566_p1;
wire   [3:0] p_lshr1_fu_570_p1;
wire   [1:0] tmp_30_fu_580_p4;
wire  signed [2:0] tmp_31_fu_590_p1;
wire   [0:0] tmp_27_fu_542_p3;
wire   [3:0] p_neg_t1_fu_574_p2;
wire   [3:0] p_lshr_f1_fu_594_p1;
wire   [3:0] tmp_6_fu_598_p3;
wire   [4:0] tmp_34_fu_610_p3;
wire   [5:0] k_cast1_fu_639_p1;
wire   [5:0] tmp_14_fu_643_p2;
wire   [4:0] k_cast_fu_635_p1;
wire   [4:0] tmp18_fu_653_p2;
wire   [4:0] tmp_17_fu_658_p2;
wire   [31:0] tmp_17_to_int_fu_668_p1;
wire   [31:0] tmp_17_neg_fu_672_p2;
wire   [31:0] A_minus_sum_to_int_fu_691_p1;
wire   [7:0] tmp_22_fu_695_p4;
wire   [22:0] tmp_9_fu_705_p1;
wire   [0:0] notrhs_fu_715_p2;
wire   [0:0] notlhs_fu_709_p2;
wire   [0:0] tmp_23_fu_721_p2;
wire   [0:0] tmp_24_fu_313_p2;
wire   [31:0] grp_fu_319_p2;
wire   [0:0] sel_tmp_fu_753_p2;
wire   [31:0] grp_fu_324_p2;
wire   [0:0] sel_tmp2_fu_766_p2;
wire   [31:0] diag_internal_2_1_fu_758_p3;
wire   [0:0] sel_tmp4_fu_779_p2;
wire   [31:0] diag_internal_2_2_fu_771_p3;
wire   [31:0] diag_internal_2_5_fu_792_p3;
reg   [1:0] grp_fu_288_opcode;
wire    ap_block_pp0_stage0_00001;
reg   [31:0] ap_return_preg;
reg   [12:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_return_preg = 32'd0;
end

cholesky_alt4_L_ibkb #(
    .DataWidth( 32 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
L_internal_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(L_internal_address0),
    .ce0(L_internal_ce0),
    .we0(L_internal_we0),
    .d0(grp_fu_296_p2),
    .q0(L_internal_q0),
    .address1(L_internal_address1),
    .ce1(L_internal_ce1),
    .q1(L_internal_q1)
);

cholesky_inverse_cud #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cholesky_inverse_cud_U1(
    .din0(grp_fu_288_p0),
    .din1(grp_fu_288_p1),
    .opcode(grp_fu_288_opcode),
    .dout(grp_fu_288_p2)
);

cholesky_inverse_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cholesky_inverse_dEe_U2(
    .din0(grp_fu_296_p0),
    .din1(grp_fu_296_p1),
    .dout(grp_fu_296_p2)
);

cholesky_inverse_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cholesky_inverse_dEe_U3(
    .din0(grp_fu_296_p2),
    .din1(grp_fu_296_p2),
    .dout(tmp_i_fu_306_p2)
);

cholesky_inverse_eOg #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
cholesky_inverse_eOg_U4(
    .din0(grp_fu_288_p2),
    .din1(32'd0),
    .opcode(5'd4),
    .dout(tmp_24_fu_313_p2)
);

cholesky_inverse_fYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cholesky_inverse_fYi_U5(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(A_minus_sum_reg_922),
    .ce(1'b1),
    .dout(grp_fu_319_p2)
);

cholesky_inverse_g8j #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cholesky_inverse_g8j_U6(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(A_minus_sum_reg_922),
    .ce(1'b1),
    .dout(grp_fu_324_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp0_exit_iter0_state5) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state5);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_return_preg <= 32'd0;
    end else begin
        if (((exitcond4_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
            ap_return_preg <= return_code_reg_217;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        if ((indvars_iv_reg_229 == 2'd0)) begin
            L_diag_recip_reg_274 <= diag_internal_2_7_reg_193;
        end else if ((~(indvars_iv_reg_229 == 2'd0) & ~(indvars_iv_reg_229 == 2'd1))) begin
            L_diag_recip_reg_274 <= diag_internal_2_s_reg_169;
        end else if ((indvars_iv_reg_229 == 2'd1)) begin
            L_diag_recip_reg_274 <= diag_internal_2_4_reg_181;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        indvars_iv1_reg_205 <= i_reg_819;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        indvars_iv1_reg_205 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        indvars_iv_reg_229 <= j_reg_848;
    end else if (((exitcond4_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        indvars_iv_reg_229 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_623_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        k_reg_263 <= k_1_fu_629_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        k_reg_263 <= 2'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_reg_888 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        prod_cast_to_off_dia_reg_253 <= grp_fu_288_p2;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        prod_cast_to_off_dia_reg_253 <= A_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        return_code_reg_217 <= p_0_i_reg_933;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        return_code_reg_217 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        square_sum_reg_241 <= square_sum_1_reg_917;
    end else if (((exitcond4_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        square_sum_reg_241 <= 32'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond4_fu_329_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        A_addr_reg_835 <= tmp_22_cast_fu_467_p1;
        L_addr_reg_840 <= tmp_22_cast_fu_467_p1;
        i_off_reg_824 <= i_off_fu_435_p2;
        tmp_2_cast1_reg_830[2 : 0] <= tmp_2_cast1_fu_441_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        A_minus_sum_reg_922 <= grp_fu_288_p2;
        p_0_i_reg_933 <= p_0_i_fu_733_p3;
        tmp_25_reg_928 <= tmp_25_fu_727_p2;
        tmp_26_reg_938 <= tmp_26_fu_741_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond3_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        L_addr_1_reg_858 <= tmp_35_cast_fu_506_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        L_addr_2_reg_878 <= tmp_35_fu_618_p1;
        indvars_iv_cast1_reg_863[1 : 0] <= indvars_iv_cast1_fu_512_p1[1 : 0];
        j_sub1_cast20_cast_reg_868 <= j_sub1_cast20_cast_fu_522_p1;
        tmp_9_cast_reg_873 <= tmp_9_cast_fu_606_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state14)) begin
        diag_internal_2_4_reg_181 <= diag_internal_2_6_fu_800_p3;
        diag_internal_2_7_reg_193 <= diag_internal_2_8_fu_808_p3;
        diag_internal_2_s_reg_169 <= diag_internal_2_3_fu_784_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        exitcond_reg_888 <= exitcond_fu_623_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_819 <= i_fu_335_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        j_reg_848 <= j_fu_483_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        square_sum_1_reg_917 <= grp_fu_288_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        tmp_12_reg_912 <= tmp_12_fu_683_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        if ((exitcond3_fu_477_p2 == 1'd1)) begin
            A_address0 = A_addr_reg_835;
        end else if ((exitcond3_fu_477_p2 == 1'd0)) begin
            A_address0 = tmp_35_cast_fu_506_p1;
        end else begin
            A_address0 = 'bx;
        end
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((exitcond3_fu_477_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3)) | ((exitcond3_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        L_address0 = L_addr_reg_840;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        L_address0 = L_addr_2_reg_878;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        L_address0 = L_addr_1_reg_858;
    end else begin
        L_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        L_ce0 = 1'b1;
    end else begin
        L_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        L_d0 = new_L_fu_745_p3;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        L_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        L_d0 = grp_fu_296_p2;
    end else begin
        L_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        L_internal_address0 = tmp_13_fu_687_p1;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        L_internal_address0 = tmp_15_fu_648_p1;
    end else begin
        L_internal_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        L_internal_ce0 = 1'b1;
    end else begin
        L_internal_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        L_internal_ce1 = 1'b1;
    end else begin
        L_internal_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        L_internal_we0 = 1'b1;
    end else begin
        L_internal_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8))) begin
        L_we0 = 1'b1;
    end else begin
        L_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_623_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state5 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state5 = 1'b0;
    end
end

always @ (*) begin
    if ((((exitcond4_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2)) | ((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond4_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_return = return_code_reg_217;
    end else begin
        ap_return = ap_return_preg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_288_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state8) | ((exitcond_reg_888 == 1'd0) & (1'b0 == ap_block_pp0_stage0_00001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_288_opcode = 2'd0;
    end else begin
        grp_fu_288_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_288_p0 = A_q0;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_288_p0 = square_sum_reg_241;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_288_p0 = prod_cast_to_off_dia_reg_253;
    end else begin
        grp_fu_288_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        grp_fu_288_p1 = square_sum_reg_241;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_288_p1 = tmp_i_fu_306_p2;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_288_p1 = grp_fu_296_p2;
    end else begin
        grp_fu_288_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_296_p0 = prod_cast_to_off_dia_reg_253;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_296_p0 = L_internal_q1;
    end else begin
        grp_fu_296_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        grp_fu_296_p1 = L_diag_recip_reg_274;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_296_p1 = tmp_16_fu_678_p1;
    end else begin
        grp_fu_296_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((exitcond4_fu_329_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((exitcond3_fu_477_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((exitcond_fu_623_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((exitcond_fu_623_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_minus_sum_to_int_fu_691_p1 = grp_fu_288_p2;

assign L_internal_address1 = tmp_18_fu_663_p1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd7];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign diag_internal_2_1_fu_758_p3 = ((sel_tmp_fu_753_p2[0:0] === 1'b1) ? grp_fu_324_p2 : diag_internal_2_s_reg_169);

assign diag_internal_2_2_fu_771_p3 = ((sel_tmp2_fu_766_p2[0:0] === 1'b1) ? diag_internal_2_s_reg_169 : diag_internal_2_1_fu_758_p3);

assign diag_internal_2_3_fu_784_p3 = ((sel_tmp4_fu_779_p2[0:0] === 1'b1) ? diag_internal_2_s_reg_169 : diag_internal_2_2_fu_771_p3);

assign diag_internal_2_5_fu_792_p3 = ((sel_tmp2_fu_766_p2[0:0] === 1'b1) ? grp_fu_324_p2 : diag_internal_2_4_reg_181);

assign diag_internal_2_6_fu_800_p3 = ((sel_tmp4_fu_779_p2[0:0] === 1'b1) ? diag_internal_2_4_reg_181 : diag_internal_2_5_fu_792_p3);

assign diag_internal_2_8_fu_808_p3 = ((sel_tmp4_fu_779_p2[0:0] === 1'b1) ? grp_fu_324_p2 : diag_internal_2_7_reg_193);

assign exitcond3_fu_477_p2 = ((indvars_iv_cast_cast_fu_473_p1 == indvars_iv1_reg_205) ? 1'b1 : 1'b0);

assign exitcond4_fu_329_p2 = ((indvars_iv1_reg_205 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_623_p2 = ((k_reg_263 == indvars_iv_reg_229) ? 1'b1 : 1'b0);

assign i_fu_335_p2 = (indvars_iv1_reg_205 + 3'd1);

assign i_off_fu_435_p2 = ($signed(i_sub1_cast1_fu_347_p1) + $signed(tmp_1_cast_fu_431_p1));

assign i_sub1_cast1_fu_347_p1 = i_sub1_fu_341_p2;

assign i_sub1_cast_fu_351_p1 = i_sub1_fu_341_p2;

assign i_sub1_fu_341_p2 = ($signed(indvars_iv1_reg_205) + $signed(3'd7));

assign indvars_iv_cast1_fu_512_p1 = indvars_iv_reg_229;

assign indvars_iv_cast_cast_fu_473_p1 = indvars_iv_reg_229;

assign j_fu_483_p2 = (indvars_iv_reg_229 + 2'd1);

assign j_sub1_cast20_cast_fu_522_p1 = j_sub1_fu_516_p2;

assign j_sub1_cast_fu_526_p1 = j_sub1_fu_516_p2;

assign j_sub1_fu_516_p2 = ($signed(indvars_iv_reg_229) + $signed(2'd3));

assign k_1_fu_629_p2 = (k_reg_263 + 2'd1);

assign k_cast1_fu_639_p1 = k_reg_263;

assign k_cast_fu_635_p1 = k_reg_263;

assign new_L_fu_745_p3 = ((tmp_25_reg_928[0:0] === 1'b1) ? 32'd0 : grp_fu_319_p2);

assign notlhs_fu_709_p2 = ((tmp_22_fu_695_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs_fu_715_p2 = ((tmp_9_fu_705_p1 == 23'd0) ? 1'b1 : 1'b0);

assign p_0_i_fu_733_p3 = ((tmp_25_fu_727_p2[0:0] === 1'b1) ? 32'd1 : return_code_reg_217);

assign p_lshr1_fu_570_p1 = $unsigned(tmp_29_fu_566_p1);

assign p_lshr_f1_fu_594_p1 = $unsigned(tmp_31_fu_590_p1);

assign p_lshr_f_fu_419_p1 = $unsigned(tmp_20_fu_415_p1);

assign p_lshr_fu_395_p1 = $unsigned(tmp_10_fu_391_p1);

assign p_neg1_fu_550_p2 = (3'd0 - tmp_8_fu_536_p2);

assign p_neg_fu_375_p2 = (4'd0 - tmp_s_fu_361_p2);

assign p_neg_t1_fu_574_p2 = (4'd0 - p_lshr1_fu_570_p1);

assign p_neg_t_fu_399_p2 = (5'd0 - p_lshr_fu_395_p1);

assign sel_tmp2_fu_766_p2 = ((tmp_26_reg_938 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_779_p2 = ((tmp_26_reg_938 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_753_p2 = ((tmp_26_reg_938 == 2'd2) ? 1'b1 : 1'b0);

assign tmp18_fu_653_p2 = ($signed(k_cast_fu_635_p1) + $signed(tmp_9_cast_reg_873));

assign tmp_10_fu_391_p1 = $signed(tmp_7_fu_381_p4);

assign tmp_12_fu_683_p2 = (indvars_iv_cast1_reg_863 + i_off_reg_824);

assign tmp_13_fu_687_p1 = $signed(tmp_12_reg_912);

assign tmp_14_fu_643_p2 = (i_off_reg_824 + k_cast1_fu_639_p1);

assign tmp_15_fu_648_p1 = $signed(tmp_14_fu_643_p2);

assign tmp_16_fu_678_p1 = tmp_17_neg_fu_672_p2;

assign tmp_17_fu_658_p2 = ($signed(tmp18_fu_653_p2) + $signed(j_sub1_cast20_cast_reg_868));

assign tmp_17_neg_fu_672_p2 = (tmp_17_to_int_fu_668_p1 ^ 32'd2147483648);

assign tmp_17_to_int_fu_668_p1 = L_internal_q0;

assign tmp_18_fu_663_p1 = $signed(tmp_17_fu_658_p2);

assign tmp_19_fu_405_p4 = {{tmp_s_fu_361_p2[3:1]}};

assign tmp_1_cast_fu_431_p1 = $signed(tmp_4_fu_423_p3);

assign tmp_20_fu_415_p1 = $signed(tmp_19_fu_405_p4);

assign tmp_21_cast_fu_457_p1 = tmp_fu_449_p3;

assign tmp_21_fu_461_p2 = (tmp_2_cast_fu_445_p1 + tmp_21_cast_fu_457_p1);

assign tmp_22_cast_fu_467_p1 = tmp_21_fu_461_p2;

assign tmp_22_fu_695_p4 = {{A_minus_sum_to_int_fu_691_p1[30:23]}};

assign tmp_23_fu_721_p2 = (notrhs_fu_715_p2 | notlhs_fu_709_p2);

assign tmp_25_fu_727_p2 = (tmp_24_fu_313_p2 & tmp_23_fu_721_p2);

assign tmp_26_fu_741_p1 = indvars_iv1_reg_205[1:0];

assign tmp_27_fu_542_p3 = tmp_8_fu_536_p2[32'd2];

assign tmp_28_fu_556_p4 = {{p_neg1_fu_550_p2[2:1]}};

assign tmp_29_fu_566_p1 = $signed(tmp_28_fu_556_p4);

assign tmp_2_cast1_fu_441_p1 = indvars_iv1_reg_205;

assign tmp_2_cast_fu_445_p1 = indvars_iv1_reg_205;

assign tmp_2_fu_367_p3 = tmp_s_fu_361_p2[32'd3];

assign tmp_30_fu_580_p4 = {{tmp_8_fu_536_p2[2:1]}};

assign tmp_31_fu_590_p1 = $signed(tmp_30_fu_580_p4);

assign tmp_32_fu_489_p3 = {{indvars_iv_reg_229}, {2'd0}};

assign tmp_33_fu_501_p2 = (tmp_2_cast1_reg_830 + tmp_34_cast_fu_497_p1);

assign tmp_34_cast_fu_497_p1 = tmp_32_fu_489_p3;

assign tmp_34_fu_610_p3 = {{indvars_iv1_reg_205}, {indvars_iv_reg_229}};

assign tmp_35_cast_fu_506_p1 = tmp_33_fu_501_p2;

assign tmp_35_fu_618_p1 = tmp_34_fu_610_p3;

assign tmp_4_fu_423_p3 = ((tmp_2_fu_367_p3[0:0] === 1'b1) ? p_neg_t_fu_399_p2 : p_lshr_f_fu_419_p1);

assign tmp_6_fu_598_p3 = ((tmp_27_fu_542_p3[0:0] === 1'b1) ? p_neg_t1_fu_574_p2 : p_lshr_f1_fu_594_p1);

assign tmp_7_cast_fu_530_p0 = j_sub1_cast_fu_526_p1;

assign tmp_7_cast_fu_530_p1 = j_sub1_cast_fu_526_p1;

assign tmp_7_cast_fu_530_p2 = ($signed(tmp_7_cast_fu_530_p0) * $signed(tmp_7_cast_fu_530_p1));

assign tmp_7_fu_381_p4 = {{p_neg_fu_375_p2[3:1]}};

assign tmp_8_fu_536_p2 = ($signed(tmp_7_cast_fu_530_p2) - $signed(j_sub1_cast_fu_526_p1));

assign tmp_9_cast_fu_606_p1 = $signed(tmp_6_fu_598_p3);

assign tmp_9_fu_705_p1 = A_minus_sum_to_int_fu_691_p1[22:0];

assign tmp_cast_fu_355_p0 = i_sub1_cast_fu_351_p1;

assign tmp_cast_fu_355_p1 = i_sub1_cast_fu_351_p1;

assign tmp_cast_fu_355_p2 = ($signed(tmp_cast_fu_355_p0) * $signed(tmp_cast_fu_355_p1));

assign tmp_fu_449_p3 = {{indvars_iv1_reg_205}, {2'd0}};

assign tmp_s_fu_361_p2 = ($signed(tmp_cast_fu_355_p2) - $signed(i_sub1_cast_fu_351_p1));

always @ (posedge ap_clk) begin
    tmp_2_cast1_reg_830[4:3] <= 2'b00;
    indvars_iv_cast1_reg_863[5:2] <= 4'b0000;
end

endmodule //cholesky_alt4
