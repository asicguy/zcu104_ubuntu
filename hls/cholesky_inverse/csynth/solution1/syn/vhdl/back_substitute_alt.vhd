-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity back_substitute_alt is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_ce0 : OUT STD_LOGIC;
    B_we0 : OUT STD_LOGIC;
    B_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    B_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    B_ce1 : OUT STD_LOGIC;
    B_we1 : OUT STD_LOGIC;
    B_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of back_substitute_alt is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0000010";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (6 downto 0) := "0000100";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (6 downto 0) := "0001000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (6 downto 0) := "0010000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (6 downto 0) := "0100000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_161 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_195 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond3_fu_229_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_fu_235_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_fu_268_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_690 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_690_pp0_iter1_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_690_pp0_iter2_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_690_pp0_iter3_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_reg_690_pp0_iter4_reg : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal i_2_fu_298_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_2_reg_726 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal tmp_20_cast_fu_316_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_20_cast_reg_731 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond2_fu_292_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_cast_fu_328_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_cast_reg_737 : STD_LOGIC_VECTOR (5 downto 0);
    signal select_column_multip_fu_336_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_column_multip_reg_742 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond1_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal j_1_fu_356_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_1_reg_752 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_368_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_reg_761 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_cast_fu_374_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_24_cast_reg_765 : STD_LOGIC_VECTOR (5 downto 0);
    signal A_addr_2_reg_771 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_388_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state11_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state12_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal k_2_fu_394_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal tmp_25_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_785 : STD_LOGIC_VECTOR (0 downto 0);
    signal row_sum_addr_1_reg_789 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_34_fu_428_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_34_reg_795 : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_29_reg_800 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_27_reg_805 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_43_fu_444_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_43_reg_810 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_30_fu_459_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_30_reg_820 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state11 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal row_sum_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal row_sum_ce0 : STD_LOGIC;
    signal row_sum_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal row_sum_ce1 : STD_LOGIC;
    signal row_sum_we1 : STD_LOGIC;
    signal row_sum_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal i1_reg_172 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal j_reg_184 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal tmp_40_cast_fu_263_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_44_cast_fu_383_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_cast_fu_423_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal tmp_51_cast_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_47_cast_fu_480_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_50_cast_fu_519_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal diag_3_fu_56 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_217_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal diag_3_1_fu_60 : STD_LOGIC_VECTOR (31 downto 0);
    signal diag_3_2_fu_64 : STD_LOGIC_VECTOR (31 downto 0);
    signal diag_3_3_fu_68 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_multiplier_0_1_fu_76 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_multiplier_0_3_fu_624_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_multiplier_0_2_fu_80 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_multiplier_0_16_fu_616_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_multiplier_0_5_fu_84 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_multiplier_0_14_fu_600_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_multiplier_0_6_fu_88 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_multiplier_0_7_fu_576_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_column_multip_1_fu_538_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_211_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_33_fu_497_p6 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_31_fu_533_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_36_fu_245_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_39_cast_fu_253_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_cast_fu_241_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_37_fu_257_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_38_fu_320_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_column_multip_fu_336_p5 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_39_fu_378_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_45_fu_406_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_53_cast_fu_414_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_46_fu_418_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_42_fu_432_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_49_cast_fu_440_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_44_fu_449_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_40_fu_463_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_46_cast_fu_471_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_41_fu_475_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal subst_sum_fu_206_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_to_int_fu_523_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_32_neg_fu_527_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sel_tmp1_fu_558_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal column_multiplier_0_fu_550_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp3_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal column_multiplier_0_4_fu_563_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_multiplier_0_8_fu_584_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_multiplier_0_9_fu_592_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal column_multiplier_0_15_fu_608_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_condition_304 : BOOLEAN;
    signal ap_condition_632 : BOOLEAN;

    component cholesky_inverse_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cholesky_inverse_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cholesky_inverse_jbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cholesky_inverse_kbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        din3_WIDTH : INTEGER;
        din4_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component back_substitute_ahbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    row_sum_U : component back_substitute_ahbi
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => row_sum_address0,
        ce0 => row_sum_ce0,
        q0 => row_sum_q0,
        address1 => row_sum_addr_1_reg_789,
        ce1 => row_sum_ce1,
        we1 => row_sum_we1,
        d1 => row_sum_d1);

    cholesky_inverse_ibs_U15 : component cholesky_inverse_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => row_sum_q0,
        din1 => grp_fu_211_p2,
        dout => subst_sum_fu_206_p2);

    cholesky_inverse_dEe_U16 : component cholesky_inverse_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_211_p0,
        din1 => grp_fu_211_p1,
        dout => grp_fu_211_p2);

    cholesky_inverse_jbC_U17 : component cholesky_inverse_jbC
    generic map (
        ID => 1,
        NUM_STAGE => 5,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => A_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_217_p2);

    cholesky_inverse_kbM_U18 : component cholesky_inverse_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => diag_3_fu_56,
        din1 => diag_3_1_fu_60,
        din2 => diag_3_2_fu_64,
        din3 => diag_3_3_fu_68,
        din4 => select_column_multip_fu_336_p5,
        dout => select_column_multip_fu_336_p6);

    cholesky_inverse_kbM_U19 : component cholesky_inverse_kbM
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        din2_WIDTH => 32,
        din3_WIDTH => 32,
        din4_WIDTH => 2,
        dout_WIDTH => 32)
    port map (
        din0 => column_multiplier_0_1_fu_76,
        din1 => column_multiplier_0_2_fu_80,
        din2 => column_multiplier_0_5_fu_84,
        din3 => column_multiplier_0_6_fu_88,
        din4 => tmp_34_reg_795,
        dout => tmp_33_fu_497_p6);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif (((tmp_22_fu_362_p2 = ap_const_lv1_0) and (exitcond1_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state11) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state11);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif (((tmp_22_fu_362_p2 = ap_const_lv1_0) and (exitcond1_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i1_reg_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                i1_reg_172 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond1_fu_350_p2 = ap_const_lv1_1))) then 
                i1_reg_172 <= i_2_reg_726;
            end if; 
        end if;
    end process;

    i_reg_161_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_fu_229_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_161 <= i_1_fu_235_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_161 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j_reg_184_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
                j_reg_184 <= j_1_reg_752;
            elsif (((exitcond2_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then 
                j_reg_184 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    k_reg_195_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_388_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
                k_reg_195 <= k_2_fu_394_p2;
            elsif (((tmp_22_fu_362_p2 = ap_const_lv1_0) and (exitcond1_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then 
                k_reg_195 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_22_fu_362_p2 = ap_const_lv1_0) and (exitcond1_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                A_addr_2_reg_771 <= tmp_44_cast_fu_383_p1(4 - 1 downto 0);
                tmp_23_reg_761 <= tmp_23_fu_368_p2;
                    tmp_24_cast_reg_765(2 downto 0) <= tmp_24_cast_fu_374_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_25_reg_785 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_23_reg_761 = ap_const_lv1_1))) then
                column_multiplier_0_1_fu_76 <= column_multiplier_0_3_fu_624_p3;
                column_multiplier_0_2_fu_80 <= column_multiplier_0_16_fu_616_p3;
                column_multiplier_0_5_fu_84 <= column_multiplier_0_14_fu_600_p3;
                column_multiplier_0_6_fu_88 <= column_multiplier_0_7_fu_576_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_690_pp0_iter4_reg = ap_const_lv2_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                diag_3_1_fu_60 <= grp_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_690_pp0_iter4_reg = ap_const_lv2_2) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                diag_3_2_fu_64 <= grp_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_690_pp0_iter4_reg = ap_const_lv2_3) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                diag_3_3_fu_68 <= grp_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_reg_690_pp0_iter4_reg = ap_const_lv2_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1))) then
                diag_3_fu_56 <= grp_fu_217_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                i_2_reg_726 <= i_2_fu_298_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                j_1_reg_752 <= j_1_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_25_fu_400_p2 = ap_const_lv1_0) and (exitcond_fu_388_p2 = ap_const_lv1_0) and (tmp_23_reg_761 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                row_sum_addr_1_reg_789 <= tmp_54_cast_fu_423_p1(4 - 1 downto 0);
                tmp_34_reg_795 <= tmp_34_fu_428_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_292_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                select_column_multip_reg_742 <= select_column_multip_fu_336_p6;
                    tmp_20_cast_reg_731(2 downto 0) <= tmp_20_cast_fu_316_p1(2 downto 0);
                    tmp_43_cast_reg_737(4 downto 2) <= tmp_43_cast_fu_328_p1(4 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_25_reg_785 <= tmp_25_fu_400_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_25_fu_400_p2 = ap_const_lv1_0) and (exitcond_fu_388_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_23_reg_761 = ap_const_lv1_1))) then
                tmp_27_reg_805 <= grp_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_25_fu_400_p2 = ap_const_lv1_0) and (exitcond_fu_388_p2 = ap_const_lv1_0) and (tmp_23_reg_761 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then
                tmp_29_reg_800 <= grp_fu_223_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_25_fu_400_p2 = ap_const_lv1_0) and (exitcond_fu_388_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_23_reg_761 = ap_const_lv1_1))) then
                tmp_30_reg_820 <= tmp_30_fu_459_p1;
                tmp_43_reg_810 <= tmp_43_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond3_fu_229_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_690 <= tmp_fu_268_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_reg_690_pp0_iter1_reg <= tmp_reg_690;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                tmp_reg_690_pp0_iter2_reg <= tmp_reg_690_pp0_iter1_reg;
                tmp_reg_690_pp0_iter3_reg <= tmp_reg_690_pp0_iter2_reg;
                tmp_reg_690_pp0_iter4_reg <= tmp_reg_690_pp0_iter3_reg;
            end if;
        end if;
    end process;
    tmp_20_cast_reg_731(5 downto 3) <= "000";
    tmp_43_cast_reg_737(1 downto 0) <= "00";
    tmp_43_cast_reg_737(5) <= '0';
    tmp_24_cast_reg_765(5 downto 3) <= "000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond3_fu_229_p2, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state9, exitcond2_fu_292_p2, exitcond1_fu_350_p2, ap_CS_fsm_state10, tmp_22_fu_362_p2, exitcond_fu_388_p2, ap_enable_reg_pp1_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_block_pp1_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond3_fu_229_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) and not(((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (exitcond3_fu_229_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) or ((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond2_fu_292_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state10) and (exitcond1_fu_350_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state9;
                elsif (((tmp_22_fu_362_p2 = ap_const_lv1_0) and (exitcond1_fu_350_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state10))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_fu_388_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (exitcond_fu_388_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when others =>  
                ap_NS_fsm <= "XXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, A_addr_2_reg_771, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, tmp_40_cast_fu_263_p1, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            A_address0 <= A_addr_2_reg_771;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_address0 <= tmp_40_cast_fu_263_p1(4 - 1 downto 0);
        else 
            A_address0 <= "XXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    B_address0 <= tmp_47_cast_fu_480_p1(4 - 1 downto 0);
    B_address1 <= tmp_50_cast_fu_519_p1(4 - 1 downto 0);

    B_ce0_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if (((ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            B_ce0 <= ap_const_logic_1;
        else 
            B_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            B_ce1 <= ap_const_logic_1;
        else 
            B_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    B_d0 <= ap_const_lv32_0;
    B_d1 <= select_column_multip_1_fu_538_p3;

    B_we0_assign_proc : process(exitcond_fu_388_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, tmp_25_fu_400_p2)
    begin
        if (((exitcond_fu_388_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (tmp_25_fu_400_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            B_we0 <= ap_const_logic_1;
        else 
            B_we0 <= ap_const_logic_0;
        end if; 
    end process;


    B_we1_assign_proc : process(tmp_23_reg_761, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, tmp_25_reg_785, ap_enable_reg_pp1_iter1)
    begin
        if (((tmp_25_reg_785 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_23_reg_761 = ap_const_lv1_1))) then 
            B_we1 <= ap_const_logic_1;
        else 
            B_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(5);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(4);
    ap_CS_fsm_state13 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(2);
    ap_CS_fsm_state9 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_304_assign_proc : process(ap_CS_fsm_pp1_stage0, tmp_25_reg_785, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
                ap_condition_304 <= ((tmp_25_reg_785 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_condition_632_assign_proc : process(exitcond_fu_388_p2, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, tmp_25_fu_400_p2, ap_block_pp1_stage0)
    begin
                ap_condition_632 <= ((tmp_25_fu_400_p2 = ap_const_lv1_0) and (exitcond_fu_388_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond3_fu_229_p2)
    begin
        if ((exitcond3_fu_229_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state11_assign_proc : process(exitcond_fu_388_p2)
    begin
        if ((exitcond_fu_388_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state11 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state9, exitcond2_fu_292_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond2_fu_292_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state9, exitcond2_fu_292_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond2_fu_292_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    column_multiplier_0_14_fu_600_p3 <= 
        column_multiplier_0_5_fu_84 when (sel_tmp3_fu_571_p2(0) = '1') else 
        column_multiplier_0_9_fu_592_p3;
    column_multiplier_0_15_fu_608_p3 <= 
        select_column_multip_1_fu_538_p3 when (sel_tmp1_fu_558_p2(0) = '1') else 
        column_multiplier_0_2_fu_80;
    column_multiplier_0_16_fu_616_p3 <= 
        column_multiplier_0_2_fu_80 when (sel_tmp3_fu_571_p2(0) = '1') else 
        column_multiplier_0_15_fu_608_p3;
    column_multiplier_0_3_fu_624_p3 <= 
        select_column_multip_1_fu_538_p3 when (sel_tmp3_fu_571_p2(0) = '1') else 
        column_multiplier_0_1_fu_76;
    column_multiplier_0_4_fu_563_p3 <= 
        column_multiplier_0_6_fu_88 when (sel_tmp1_fu_558_p2(0) = '1') else 
        column_multiplier_0_fu_550_p3;
    column_multiplier_0_7_fu_576_p3 <= 
        column_multiplier_0_6_fu_88 when (sel_tmp3_fu_571_p2(0) = '1') else 
        column_multiplier_0_4_fu_563_p3;
    column_multiplier_0_8_fu_584_p3 <= 
        select_column_multip_1_fu_538_p3 when (sel_tmp_fu_545_p2(0) = '1') else 
        column_multiplier_0_5_fu_84;
    column_multiplier_0_9_fu_592_p3 <= 
        column_multiplier_0_5_fu_84 when (sel_tmp1_fu_558_p2(0) = '1') else 
        column_multiplier_0_8_fu_584_p3;
    column_multiplier_0_fu_550_p3 <= 
        column_multiplier_0_6_fu_88 when (sel_tmp_fu_545_p2(0) = '1') else 
        select_column_multip_1_fu_538_p3;
    exitcond1_fu_350_p2 <= "1" when (j_reg_184 = ap_const_lv3_4) else "0";
    exitcond2_fu_292_p2 <= "1" when (i1_reg_172 = ap_const_lv3_4) else "0";
    exitcond3_fu_229_p2 <= "1" when (i_reg_161 = ap_const_lv3_4) else "0";
    exitcond_fu_388_p2 <= "1" when (k_reg_195 = ap_const_lv3_4) else "0";

    grp_fu_211_p0_assign_proc : process(A_q0, select_column_multip_reg_742, tmp_23_reg_761, tmp_27_reg_805, ap_condition_304)
    begin
        if ((ap_const_boolean_1 = ap_condition_304)) then
            if (((tmp_27_reg_805 = ap_const_lv1_0) and (tmp_23_reg_761 = ap_const_lv1_1))) then 
                grp_fu_211_p0 <= select_column_multip_reg_742;
            elsif ((tmp_23_reg_761 = ap_const_lv1_0)) then 
                grp_fu_211_p0 <= A_q0;
            else 
                grp_fu_211_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_211_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_211_p1_assign_proc : process(tmp_23_reg_761, tmp_27_reg_805, tmp_33_fu_497_p6, tmp_31_fu_533_p1, ap_condition_304)
    begin
        if ((ap_const_boolean_1 = ap_condition_304)) then
            if (((tmp_27_reg_805 = ap_const_lv1_0) and (tmp_23_reg_761 = ap_const_lv1_1))) then 
                grp_fu_211_p1 <= tmp_31_fu_533_p1;
            elsif ((tmp_23_reg_761 = ap_const_lv1_0)) then 
                grp_fu_211_p1 <= tmp_33_fu_497_p6;
            else 
                grp_fu_211_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            grp_fu_211_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_223_p2 <= "1" when (k_reg_195 = i1_reg_172) else "0";
    i_1_fu_235_p2 <= std_logic_vector(unsigned(i_reg_161) + unsigned(ap_const_lv3_1));
    i_2_fu_298_p2 <= std_logic_vector(unsigned(i1_reg_172) + unsigned(ap_const_lv3_1));
    j_1_fu_356_p2 <= std_logic_vector(unsigned(j_reg_184) + unsigned(ap_const_lv3_1));
    k_2_fu_394_p2 <= std_logic_vector(unsigned(k_reg_195) + unsigned(ap_const_lv3_1));

    row_sum_address0_assign_proc : process(tmp_23_reg_761, tmp_54_cast_fu_423_p1, tmp_51_cast_fu_454_p1, ap_condition_632)
    begin
        if ((ap_const_boolean_1 = ap_condition_632)) then
            if ((tmp_23_reg_761 = ap_const_lv1_1)) then 
                row_sum_address0 <= tmp_51_cast_fu_454_p1(4 - 1 downto 0);
            elsif ((tmp_23_reg_761 = ap_const_lv1_0)) then 
                row_sum_address0 <= tmp_54_cast_fu_423_p1(4 - 1 downto 0);
            else 
                row_sum_address0 <= "XXXX";
            end if;
        else 
            row_sum_address0 <= "XXXX";
        end if; 
    end process;


    row_sum_ce0_assign_proc : process(tmp_23_reg_761, exitcond_fu_388_p2, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0, tmp_25_fu_400_p2)
    begin
        if ((((tmp_25_fu_400_p2 = ap_const_lv1_0) and (exitcond_fu_388_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_23_reg_761 = ap_const_lv1_1)) or ((tmp_25_fu_400_p2 = ap_const_lv1_0) and (exitcond_fu_388_p2 = ap_const_lv1_0) and (tmp_23_reg_761 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001)))) then 
            row_sum_ce0 <= ap_const_logic_1;
        else 
            row_sum_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    row_sum_ce1_assign_proc : process(ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            row_sum_ce1 <= ap_const_logic_1;
        else 
            row_sum_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    row_sum_d1 <= 
        grp_fu_211_p2 when (tmp_29_reg_800(0) = '1') else 
        subst_sum_fu_206_p2;

    row_sum_we1_assign_proc : process(tmp_23_reg_761, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, tmp_25_reg_785, ap_enable_reg_pp1_iter1)
    begin
        if (((tmp_25_reg_785 = ap_const_lv1_0) and (tmp_23_reg_761 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0_11001))) then 
            row_sum_we1 <= ap_const_logic_1;
        else 
            row_sum_we1 <= ap_const_logic_0;
        end if; 
    end process;

    sel_tmp1_fu_558_p2 <= "1" when (tmp_30_reg_820 = ap_const_lv2_1) else "0";
    sel_tmp3_fu_571_p2 <= "1" when (tmp_30_reg_820 = ap_const_lv2_0) else "0";
    sel_tmp_fu_545_p2 <= "1" when (tmp_30_reg_820 = ap_const_lv2_2) else "0";
    select_column_multip_1_fu_538_p3 <= 
        select_column_multip_reg_742 when (tmp_27_reg_805(0) = '1') else 
        grp_fu_211_p2;
    select_column_multip_fu_336_p5 <= i1_reg_172(2 - 1 downto 0);
    tmp_20_cast_fu_316_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i1_reg_172),6));
    tmp_22_fu_362_p2 <= "1" when (unsigned(j_reg_184) < unsigned(i1_reg_172)) else "0";
    tmp_23_fu_368_p2 <= "1" when (i1_reg_172 = j_reg_184) else "0";
    tmp_24_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_reg_184),6));
    tmp_25_fu_400_p2 <= "1" when (unsigned(k_reg_195) > unsigned(i1_reg_172)) else "0";
    tmp_30_fu_459_p1 <= k_reg_195(2 - 1 downto 0);
    tmp_31_fu_533_p1 <= tmp_32_neg_fu_527_p2;
    tmp_32_neg_fu_527_p2 <= (tmp_32_to_int_fu_523_p1 xor ap_const_lv32_80000000);
    tmp_32_to_int_fu_523_p1 <= row_sum_q0;
    tmp_34_fu_428_p1 <= k_reg_195(2 - 1 downto 0);
    tmp_36_fu_245_p3 <= (i_reg_161 & ap_const_lv2_0);
    tmp_37_fu_257_p2 <= std_logic_vector(unsigned(tmp_39_cast_fu_253_p1) + unsigned(tmp_cast_fu_241_p1));
    tmp_38_fu_320_p3 <= (i1_reg_172 & ap_const_lv2_0);
    tmp_39_cast_fu_253_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_36_fu_245_p3),6));
    tmp_39_fu_378_p2 <= std_logic_vector(unsigned(tmp_43_cast_reg_737) + unsigned(tmp_24_cast_fu_374_p1));
    tmp_40_cast_fu_263_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_257_p2),64));
    tmp_40_fu_463_p3 <= (k_reg_195 & ap_const_lv2_0);
    tmp_41_fu_475_p2 <= std_logic_vector(unsigned(tmp_20_cast_reg_731) + unsigned(tmp_46_cast_fu_471_p1));
    tmp_42_fu_432_p3 <= (k_reg_195 & ap_const_lv2_0);
    tmp_43_cast_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_38_fu_320_p3),6));
    tmp_43_fu_444_p2 <= std_logic_vector(unsigned(tmp_49_cast_fu_440_p1) + unsigned(tmp_20_cast_reg_731));
    tmp_44_cast_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_378_p2),64));
    tmp_44_fu_449_p2 <= std_logic_vector(unsigned(tmp_49_cast_fu_440_p1) + unsigned(tmp_24_cast_reg_765));
    tmp_45_fu_406_p3 <= (k_reg_195 & ap_const_lv2_0);
    tmp_46_cast_fu_471_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_40_fu_463_p3),6));
    tmp_46_fu_418_p2 <= std_logic_vector(unsigned(tmp_53_cast_fu_414_p1) + unsigned(tmp_24_cast_reg_765));
    tmp_47_cast_fu_480_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_41_fu_475_p2),64));
    tmp_49_cast_fu_440_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_42_fu_432_p3),6));
    tmp_50_cast_fu_519_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_43_reg_810),64));
    tmp_51_cast_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_44_fu_449_p2),64));
    tmp_53_cast_fu_414_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_45_fu_406_p3),6));
    tmp_54_cast_fu_423_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_46_fu_418_p2),64));
    tmp_cast_fu_241_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_161),6));
    tmp_fu_268_p1 <= i_reg_161(2 - 1 downto 0);
end behav;
