// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "cholesky_inverse_top_2.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic cholesky_inverse_top_2::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic cholesky_inverse_top_2::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<6> cholesky_inverse_top_2::ap_ST_fsm_state1 = "1";
const sc_lv<6> cholesky_inverse_top_2::ap_ST_fsm_state2 = "10";
const sc_lv<6> cholesky_inverse_top_2::ap_ST_fsm_state3 = "100";
const sc_lv<6> cholesky_inverse_top_2::ap_ST_fsm_state4 = "1000";
const sc_lv<6> cholesky_inverse_top_2::ap_ST_fsm_state5 = "10000";
const sc_lv<6> cholesky_inverse_top_2::ap_ST_fsm_state6 = "100000";
const sc_lv<32> cholesky_inverse_top_2::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> cholesky_inverse_top_2::ap_const_lv32_1 = "1";
const sc_lv<32> cholesky_inverse_top_2::ap_const_lv32_2 = "10";
const sc_lv<32> cholesky_inverse_top_2::ap_const_lv32_3 = "11";
const sc_lv<32> cholesky_inverse_top_2::ap_const_lv32_4 = "100";
const sc_lv<32> cholesky_inverse_top_2::ap_const_lv32_5 = "101";
const bool cholesky_inverse_top_2::ap_const_boolean_1 = true;

cholesky_inverse_top_2::cholesky_inverse_top_2(sc_module_name name) : sc_module(name), mVcdFile(0) {
    U_U = new cholesky_inverse_mb6("U_U");
    U_U->clk(ap_clk);
    U_U->reset(ap_rst);
    U_U->address0(U_address0);
    U_U->ce0(U_ce0);
    U_U->we0(U_we0);
    U_U->d0(grp_cholesky_alt4_fu_28_L_d0);
    U_U->q0(U_q0);
    U_inv_U = new cholesky_inverse_ncg("U_inv_U");
    U_inv_U->clk(ap_clk);
    U_inv_U->reset(ap_rst);
    U_inv_U->address0(U_inv_address0);
    U_inv_U->ce0(U_inv_ce0);
    U_inv_U->we0(U_inv_we0);
    U_inv_U->d0(grp_back_substitute_alt_fu_36_B_d0);
    U_inv_U->q0(U_inv_q0);
    U_inv_U->address1(U_inv_address1);
    U_inv_U->ce1(U_inv_ce1);
    U_inv_U->we1(U_inv_we1);
    U_inv_U->d1(grp_back_substitute_alt_fu_36_B_d1);
    U_inv_U->q1(U_inv_q1);
    grp_cholesky_alt4_fu_28 = new cholesky_alt4("grp_cholesky_alt4_fu_28");
    grp_cholesky_alt4_fu_28->ap_clk(ap_clk);
    grp_cholesky_alt4_fu_28->ap_rst(ap_rst);
    grp_cholesky_alt4_fu_28->ap_start(grp_cholesky_alt4_fu_28_ap_start);
    grp_cholesky_alt4_fu_28->ap_done(grp_cholesky_alt4_fu_28_ap_done);
    grp_cholesky_alt4_fu_28->ap_idle(grp_cholesky_alt4_fu_28_ap_idle);
    grp_cholesky_alt4_fu_28->ap_ready(grp_cholesky_alt4_fu_28_ap_ready);
    grp_cholesky_alt4_fu_28->A_address0(grp_cholesky_alt4_fu_28_A_address0);
    grp_cholesky_alt4_fu_28->A_ce0(grp_cholesky_alt4_fu_28_A_ce0);
    grp_cholesky_alt4_fu_28->A_q0(A_q0);
    grp_cholesky_alt4_fu_28->L_address0(grp_cholesky_alt4_fu_28_L_address0);
    grp_cholesky_alt4_fu_28->L_ce0(grp_cholesky_alt4_fu_28_L_ce0);
    grp_cholesky_alt4_fu_28->L_we0(grp_cholesky_alt4_fu_28_L_we0);
    grp_cholesky_alt4_fu_28->L_d0(grp_cholesky_alt4_fu_28_L_d0);
    grp_cholesky_alt4_fu_28->ap_return(grp_cholesky_alt4_fu_28_ap_return);
    grp_back_substitute_alt_fu_36 = new back_substitute_alt("grp_back_substitute_alt_fu_36");
    grp_back_substitute_alt_fu_36->ap_clk(ap_clk);
    grp_back_substitute_alt_fu_36->ap_rst(ap_rst);
    grp_back_substitute_alt_fu_36->ap_start(grp_back_substitute_alt_fu_36_ap_start);
    grp_back_substitute_alt_fu_36->ap_done(grp_back_substitute_alt_fu_36_ap_done);
    grp_back_substitute_alt_fu_36->ap_idle(grp_back_substitute_alt_fu_36_ap_idle);
    grp_back_substitute_alt_fu_36->ap_ready(grp_back_substitute_alt_fu_36_ap_ready);
    grp_back_substitute_alt_fu_36->A_address0(grp_back_substitute_alt_fu_36_A_address0);
    grp_back_substitute_alt_fu_36->A_ce0(grp_back_substitute_alt_fu_36_A_ce0);
    grp_back_substitute_alt_fu_36->A_q0(U_q0);
    grp_back_substitute_alt_fu_36->B_address0(grp_back_substitute_alt_fu_36_B_address0);
    grp_back_substitute_alt_fu_36->B_ce0(grp_back_substitute_alt_fu_36_B_ce0);
    grp_back_substitute_alt_fu_36->B_we0(grp_back_substitute_alt_fu_36_B_we0);
    grp_back_substitute_alt_fu_36->B_d0(grp_back_substitute_alt_fu_36_B_d0);
    grp_back_substitute_alt_fu_36->B_address1(grp_back_substitute_alt_fu_36_B_address1);
    grp_back_substitute_alt_fu_36->B_ce1(grp_back_substitute_alt_fu_36_B_ce1);
    grp_back_substitute_alt_fu_36->B_we1(grp_back_substitute_alt_fu_36_B_we1);
    grp_back_substitute_alt_fu_36->B_d1(grp_back_substitute_alt_fu_36_B_d1);
    grp_matrix_multiply_alt2_fu_42 = new matrix_multiply_alt2("grp_matrix_multiply_alt2_fu_42");
    grp_matrix_multiply_alt2_fu_42->ap_clk(ap_clk);
    grp_matrix_multiply_alt2_fu_42->ap_rst(ap_rst);
    grp_matrix_multiply_alt2_fu_42->ap_start(grp_matrix_multiply_alt2_fu_42_ap_start);
    grp_matrix_multiply_alt2_fu_42->ap_done(grp_matrix_multiply_alt2_fu_42_ap_done);
    grp_matrix_multiply_alt2_fu_42->ap_idle(grp_matrix_multiply_alt2_fu_42_ap_idle);
    grp_matrix_multiply_alt2_fu_42->ap_ready(grp_matrix_multiply_alt2_fu_42_ap_ready);
    grp_matrix_multiply_alt2_fu_42->A_address0(grp_matrix_multiply_alt2_fu_42_A_address0);
    grp_matrix_multiply_alt2_fu_42->A_ce0(grp_matrix_multiply_alt2_fu_42_A_ce0);
    grp_matrix_multiply_alt2_fu_42->A_q0(U_inv_q0);
    grp_matrix_multiply_alt2_fu_42->A_address1(grp_matrix_multiply_alt2_fu_42_A_address1);
    grp_matrix_multiply_alt2_fu_42->A_ce1(grp_matrix_multiply_alt2_fu_42_A_ce1);
    grp_matrix_multiply_alt2_fu_42->A_q1(U_inv_q1);
    grp_matrix_multiply_alt2_fu_42->C_address0(grp_matrix_multiply_alt2_fu_42_C_address0);
    grp_matrix_multiply_alt2_fu_42->C_ce0(grp_matrix_multiply_alt2_fu_42_C_ce0);
    grp_matrix_multiply_alt2_fu_42->C_we0(grp_matrix_multiply_alt2_fu_42_C_we0);
    grp_matrix_multiply_alt2_fu_42->C_d0(grp_matrix_multiply_alt2_fu_42_C_d0);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_A_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_cholesky_alt4_fu_28_A_address0 );

    SC_METHOD(thread_A_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_cholesky_alt4_fu_28_A_ce0 );

    SC_METHOD(thread_InverseA_address0);
    sensitive << ( grp_matrix_multiply_alt2_fu_42_C_address0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_InverseA_ce0);
    sensitive << ( grp_matrix_multiply_alt2_fu_42_C_ce0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_InverseA_d0);
    sensitive << ( grp_matrix_multiply_alt2_fu_42_C_d0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_InverseA_we0);
    sensitive << ( grp_matrix_multiply_alt2_fu_42_C_we0 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_U_address0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_cholesky_alt4_fu_28_L_address0 );
    sensitive << ( grp_back_substitute_alt_fu_36_A_address0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_U_ce0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_cholesky_alt4_fu_28_L_ce0 );
    sensitive << ( grp_back_substitute_alt_fu_36_A_ce0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_U_inv_address0);
    sensitive << ( grp_back_substitute_alt_fu_36_B_address0 );
    sensitive << ( grp_matrix_multiply_alt2_fu_42_A_address0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_U_inv_address1);
    sensitive << ( grp_back_substitute_alt_fu_36_B_address1 );
    sensitive << ( grp_matrix_multiply_alt2_fu_42_A_address1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_U_inv_ce0);
    sensitive << ( grp_back_substitute_alt_fu_36_B_ce0 );
    sensitive << ( grp_matrix_multiply_alt2_fu_42_A_ce0 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_U_inv_ce1);
    sensitive << ( grp_back_substitute_alt_fu_36_B_ce1 );
    sensitive << ( grp_matrix_multiply_alt2_fu_42_A_ce1 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_U_inv_we0);
    sensitive << ( grp_back_substitute_alt_fu_36_B_we0 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_U_inv_we1);
    sensitive << ( grp_back_substitute_alt_fu_36_B_we1 );
    sensitive << ( ap_CS_fsm_state4 );

    SC_METHOD(thread_U_we0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_cholesky_alt4_fu_28_L_we0 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_start);

    SC_METHOD(thread_grp_back_substitute_alt_fu_36_ap_start);
    sensitive << ( grp_back_substitute_alt_fu_36_ap_start_reg );

    SC_METHOD(thread_grp_cholesky_alt4_fu_28_ap_start);
    sensitive << ( grp_cholesky_alt4_fu_28_ap_start_reg );

    SC_METHOD(thread_grp_matrix_multiply_alt2_fu_42_ap_start);
    sensitive << ( grp_matrix_multiply_alt2_fu_42_ap_start_reg );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( grp_cholesky_alt4_fu_28_ap_done );
    sensitive << ( grp_back_substitute_alt_fu_36_ap_done );
    sensitive << ( grp_matrix_multiply_alt2_fu_42_ap_done );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state6 );

    ap_CS_fsm = "000001";
    grp_cholesky_alt4_fu_28_ap_start_reg = SC_LOGIC_0;
    grp_back_substitute_alt_fu_36_ap_start_reg = SC_LOGIC_0;
    grp_matrix_multiply_alt2_fu_42_ap_start_reg = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "cholesky_inverse_top_2_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, A_address0, "(port)A_address0");
    sc_trace(mVcdFile, A_ce0, "(port)A_ce0");
    sc_trace(mVcdFile, A_q0, "(port)A_q0");
    sc_trace(mVcdFile, InverseA_address0, "(port)InverseA_address0");
    sc_trace(mVcdFile, InverseA_ce0, "(port)InverseA_ce0");
    sc_trace(mVcdFile, InverseA_we0, "(port)InverseA_we0");
    sc_trace(mVcdFile, InverseA_d0, "(port)InverseA_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_ap_return, "grp_cholesky_alt4_fu_28_ap_return");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_ap_idle, "grp_cholesky_alt4_fu_28_ap_idle");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_ap_ready, "grp_cholesky_alt4_fu_28_ap_ready");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_ap_done, "grp_cholesky_alt4_fu_28_ap_done");
    sc_trace(mVcdFile, U_address0, "U_address0");
    sc_trace(mVcdFile, U_ce0, "U_ce0");
    sc_trace(mVcdFile, U_we0, "U_we0");
    sc_trace(mVcdFile, U_q0, "U_q0");
    sc_trace(mVcdFile, U_inv_address0, "U_inv_address0");
    sc_trace(mVcdFile, U_inv_ce0, "U_inv_ce0");
    sc_trace(mVcdFile, U_inv_we0, "U_inv_we0");
    sc_trace(mVcdFile, U_inv_q0, "U_inv_q0");
    sc_trace(mVcdFile, U_inv_address1, "U_inv_address1");
    sc_trace(mVcdFile, U_inv_ce1, "U_inv_ce1");
    sc_trace(mVcdFile, U_inv_we1, "U_inv_we1");
    sc_trace(mVcdFile, U_inv_q1, "U_inv_q1");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_ap_start, "grp_cholesky_alt4_fu_28_ap_start");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_A_address0, "grp_cholesky_alt4_fu_28_A_address0");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_A_ce0, "grp_cholesky_alt4_fu_28_A_ce0");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_L_address0, "grp_cholesky_alt4_fu_28_L_address0");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_L_ce0, "grp_cholesky_alt4_fu_28_L_ce0");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_L_we0, "grp_cholesky_alt4_fu_28_L_we0");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_L_d0, "grp_cholesky_alt4_fu_28_L_d0");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_ap_start, "grp_back_substitute_alt_fu_36_ap_start");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_ap_done, "grp_back_substitute_alt_fu_36_ap_done");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_ap_idle, "grp_back_substitute_alt_fu_36_ap_idle");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_ap_ready, "grp_back_substitute_alt_fu_36_ap_ready");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_A_address0, "grp_back_substitute_alt_fu_36_A_address0");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_A_ce0, "grp_back_substitute_alt_fu_36_A_ce0");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_B_address0, "grp_back_substitute_alt_fu_36_B_address0");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_B_ce0, "grp_back_substitute_alt_fu_36_B_ce0");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_B_we0, "grp_back_substitute_alt_fu_36_B_we0");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_B_d0, "grp_back_substitute_alt_fu_36_B_d0");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_B_address1, "grp_back_substitute_alt_fu_36_B_address1");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_B_ce1, "grp_back_substitute_alt_fu_36_B_ce1");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_B_we1, "grp_back_substitute_alt_fu_36_B_we1");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_B_d1, "grp_back_substitute_alt_fu_36_B_d1");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_ap_start, "grp_matrix_multiply_alt2_fu_42_ap_start");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_ap_done, "grp_matrix_multiply_alt2_fu_42_ap_done");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_ap_idle, "grp_matrix_multiply_alt2_fu_42_ap_idle");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_ap_ready, "grp_matrix_multiply_alt2_fu_42_ap_ready");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_A_address0, "grp_matrix_multiply_alt2_fu_42_A_address0");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_A_ce0, "grp_matrix_multiply_alt2_fu_42_A_ce0");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_A_address1, "grp_matrix_multiply_alt2_fu_42_A_address1");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_A_ce1, "grp_matrix_multiply_alt2_fu_42_A_ce1");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_C_address0, "grp_matrix_multiply_alt2_fu_42_C_address0");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_C_ce0, "grp_matrix_multiply_alt2_fu_42_C_ce0");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_C_we0, "grp_matrix_multiply_alt2_fu_42_C_we0");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_C_d0, "grp_matrix_multiply_alt2_fu_42_C_d0");
    sc_trace(mVcdFile, grp_cholesky_alt4_fu_28_ap_start_reg, "grp_cholesky_alt4_fu_28_ap_start_reg");
    sc_trace(mVcdFile, grp_back_substitute_alt_fu_36_ap_start_reg, "grp_back_substitute_alt_fu_36_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, grp_matrix_multiply_alt2_fu_42_ap_start_reg, "grp_matrix_multiply_alt2_fu_42_ap_start_reg");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, ap_return, "ap_return");
#endif

    }
}

cholesky_inverse_top_2::~cholesky_inverse_top_2() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete U_U;
    delete U_inv_U;
    delete grp_cholesky_alt4_fu_28;
    delete grp_back_substitute_alt_fu_36;
    delete grp_matrix_multiply_alt2_fu_42;
}

void cholesky_inverse_top_2::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_back_substitute_alt_fu_36_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
            grp_back_substitute_alt_fu_36_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_back_substitute_alt_fu_36_ap_ready.read())) {
            grp_back_substitute_alt_fu_36_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_cholesky_alt4_fu_28_ap_start_reg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
             esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
            grp_cholesky_alt4_fu_28_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_cholesky_alt4_fu_28_ap_ready.read())) {
            grp_cholesky_alt4_fu_28_ap_start_reg = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        grp_matrix_multiply_alt2_fu_42_ap_start_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
            grp_matrix_multiply_alt2_fu_42_ap_start_reg = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_matrix_multiply_alt2_fu_42_ap_ready.read())) {
            grp_matrix_multiply_alt2_fu_42_ap_start_reg = ap_const_logic_0;
        }
    }
}

void cholesky_inverse_top_2::thread_A_address0() {
    A_address0 = grp_cholesky_alt4_fu_28_A_address0.read();
}

void cholesky_inverse_top_2::thread_A_ce0() {
    A_ce0 = grp_cholesky_alt4_fu_28_A_ce0.read();
}

void cholesky_inverse_top_2::thread_InverseA_address0() {
    InverseA_address0 = grp_matrix_multiply_alt2_fu_42_C_address0.read();
}

void cholesky_inverse_top_2::thread_InverseA_ce0() {
    InverseA_ce0 = grp_matrix_multiply_alt2_fu_42_C_ce0.read();
}

void cholesky_inverse_top_2::thread_InverseA_d0() {
    InverseA_d0 = grp_matrix_multiply_alt2_fu_42_C_d0.read();
}

void cholesky_inverse_top_2::thread_InverseA_we0() {
    InverseA_we0 = grp_matrix_multiply_alt2_fu_42_C_we0.read();
}

void cholesky_inverse_top_2::thread_U_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        U_address0 = grp_back_substitute_alt_fu_36_A_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        U_address0 = grp_cholesky_alt4_fu_28_L_address0.read();
    } else {
        U_address0 = "XXXX";
    }
}

void cholesky_inverse_top_2::thread_U_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        U_ce0 = grp_back_substitute_alt_fu_36_A_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        U_ce0 = grp_cholesky_alt4_fu_28_L_ce0.read();
    } else {
        U_ce0 = ap_const_logic_0;
    }
}

void cholesky_inverse_top_2::thread_U_inv_address0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        U_inv_address0 = grp_matrix_multiply_alt2_fu_42_A_address0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        U_inv_address0 = grp_back_substitute_alt_fu_36_B_address0.read();
    } else {
        U_inv_address0 = "XXXX";
    }
}

void cholesky_inverse_top_2::thread_U_inv_address1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        U_inv_address1 = grp_matrix_multiply_alt2_fu_42_A_address1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        U_inv_address1 = grp_back_substitute_alt_fu_36_B_address1.read();
    } else {
        U_inv_address1 = "XXXX";
    }
}

void cholesky_inverse_top_2::thread_U_inv_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        U_inv_ce0 = grp_matrix_multiply_alt2_fu_42_A_ce0.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        U_inv_ce0 = grp_back_substitute_alt_fu_36_B_ce0.read();
    } else {
        U_inv_ce0 = ap_const_logic_0;
    }
}

void cholesky_inverse_top_2::thread_U_inv_ce1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        U_inv_ce1 = grp_matrix_multiply_alt2_fu_42_A_ce1.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        U_inv_ce1 = grp_back_substitute_alt_fu_36_B_ce1.read();
    } else {
        U_inv_ce1 = ap_const_logic_0;
    }
}

void cholesky_inverse_top_2::thread_U_inv_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        U_inv_we0 = grp_back_substitute_alt_fu_36_B_we0.read();
    } else {
        U_inv_we0 = ap_const_logic_0;
    }
}

void cholesky_inverse_top_2::thread_U_inv_we1() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        U_inv_we1 = grp_back_substitute_alt_fu_36_B_we1.read();
    } else {
        U_inv_we1 = ap_const_logic_0;
    }
}

void cholesky_inverse_top_2::thread_U_we0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        U_we0 = grp_cholesky_alt4_fu_28_L_we0.read();
    } else {
        U_we0 = ap_const_logic_0;
    }
}

void cholesky_inverse_top_2::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void cholesky_inverse_top_2::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void cholesky_inverse_top_2::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void cholesky_inverse_top_2::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void cholesky_inverse_top_2::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void cholesky_inverse_top_2::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void cholesky_inverse_top_2::thread_ap_start() {
    ap_start = ap_const_logic_1;
}

void cholesky_inverse_top_2::thread_grp_back_substitute_alt_fu_36_ap_start() {
    grp_back_substitute_alt_fu_36_ap_start = grp_back_substitute_alt_fu_36_ap_start_reg.read();
}

void cholesky_inverse_top_2::thread_grp_cholesky_alt4_fu_28_ap_start() {
    grp_cholesky_alt4_fu_28_ap_start = grp_cholesky_alt4_fu_28_ap_start_reg.read();
}

void cholesky_inverse_top_2::thread_grp_matrix_multiply_alt2_fu_42_ap_start() {
    grp_matrix_multiply_alt2_fu_42_ap_start = grp_matrix_multiply_alt2_fu_42_ap_start_reg.read();
}

void cholesky_inverse_top_2::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(grp_cholesky_alt4_fu_28_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state2;
            }
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(grp_back_substitute_alt_fu_36_ap_done.read(), ap_const_logic_1) && esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(grp_matrix_multiply_alt2_fu_42_ap_done.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        default : 
            ap_NS_fsm =  (sc_lv<6>) ("XXXXXX");
            break;
    }
}

}

