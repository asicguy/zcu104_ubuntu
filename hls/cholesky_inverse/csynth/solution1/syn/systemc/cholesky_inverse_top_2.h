// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cholesky_inverse_top_2_HH_
#define _cholesky_inverse_top_2_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cholesky_alt4.h"
#include "back_substitute_alt.h"
#include "matrix_multiply_alt2.h"
#include "cholesky_inverse_mb6.h"
#include "cholesky_inverse_ncg.h"

namespace ap_rtl {

struct cholesky_inverse_top_2 : public sc_module {
    // Port declarations 9
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<4> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<4> > InverseA_address0;
    sc_out< sc_logic > InverseA_ce0;
    sc_out< sc_logic > InverseA_we0;
    sc_out< sc_lv<32> > InverseA_d0;


    // Module declarations
    cholesky_inverse_top_2(sc_module_name name);
    SC_HAS_PROCESS(cholesky_inverse_top_2);

    ~cholesky_inverse_top_2();

    sc_trace_file* mVcdFile;

    cholesky_inverse_mb6* U_U;
    cholesky_inverse_ncg* U_inv_U;
    cholesky_alt4* grp_cholesky_alt4_fu_28;
    back_substitute_alt* grp_back_substitute_alt_fu_36;
    matrix_multiply_alt2* grp_matrix_multiply_alt2_fu_42;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_lv<6> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > grp_cholesky_alt4_fu_28_ap_return;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_logic > grp_cholesky_alt4_fu_28_ap_idle;
    sc_signal< sc_logic > grp_cholesky_alt4_fu_28_ap_ready;
    sc_signal< sc_logic > grp_cholesky_alt4_fu_28_ap_done;
    sc_signal< sc_lv<4> > U_address0;
    sc_signal< sc_logic > U_ce0;
    sc_signal< sc_logic > U_we0;
    sc_signal< sc_lv<32> > U_q0;
    sc_signal< sc_lv<4> > U_inv_address0;
    sc_signal< sc_logic > U_inv_ce0;
    sc_signal< sc_logic > U_inv_we0;
    sc_signal< sc_lv<32> > U_inv_q0;
    sc_signal< sc_lv<4> > U_inv_address1;
    sc_signal< sc_logic > U_inv_ce1;
    sc_signal< sc_logic > U_inv_we1;
    sc_signal< sc_lv<32> > U_inv_q1;
    sc_signal< sc_logic > grp_cholesky_alt4_fu_28_ap_start;
    sc_signal< sc_lv<4> > grp_cholesky_alt4_fu_28_A_address0;
    sc_signal< sc_logic > grp_cholesky_alt4_fu_28_A_ce0;
    sc_signal< sc_lv<4> > grp_cholesky_alt4_fu_28_L_address0;
    sc_signal< sc_logic > grp_cholesky_alt4_fu_28_L_ce0;
    sc_signal< sc_logic > grp_cholesky_alt4_fu_28_L_we0;
    sc_signal< sc_lv<32> > grp_cholesky_alt4_fu_28_L_d0;
    sc_signal< sc_logic > grp_back_substitute_alt_fu_36_ap_start;
    sc_signal< sc_logic > grp_back_substitute_alt_fu_36_ap_done;
    sc_signal< sc_logic > grp_back_substitute_alt_fu_36_ap_idle;
    sc_signal< sc_logic > grp_back_substitute_alt_fu_36_ap_ready;
    sc_signal< sc_lv<4> > grp_back_substitute_alt_fu_36_A_address0;
    sc_signal< sc_logic > grp_back_substitute_alt_fu_36_A_ce0;
    sc_signal< sc_lv<4> > grp_back_substitute_alt_fu_36_B_address0;
    sc_signal< sc_logic > grp_back_substitute_alt_fu_36_B_ce0;
    sc_signal< sc_logic > grp_back_substitute_alt_fu_36_B_we0;
    sc_signal< sc_lv<32> > grp_back_substitute_alt_fu_36_B_d0;
    sc_signal< sc_lv<4> > grp_back_substitute_alt_fu_36_B_address1;
    sc_signal< sc_logic > grp_back_substitute_alt_fu_36_B_ce1;
    sc_signal< sc_logic > grp_back_substitute_alt_fu_36_B_we1;
    sc_signal< sc_lv<32> > grp_back_substitute_alt_fu_36_B_d1;
    sc_signal< sc_logic > grp_matrix_multiply_alt2_fu_42_ap_start;
    sc_signal< sc_logic > grp_matrix_multiply_alt2_fu_42_ap_done;
    sc_signal< sc_logic > grp_matrix_multiply_alt2_fu_42_ap_idle;
    sc_signal< sc_logic > grp_matrix_multiply_alt2_fu_42_ap_ready;
    sc_signal< sc_lv<4> > grp_matrix_multiply_alt2_fu_42_A_address0;
    sc_signal< sc_logic > grp_matrix_multiply_alt2_fu_42_A_ce0;
    sc_signal< sc_lv<4> > grp_matrix_multiply_alt2_fu_42_A_address1;
    sc_signal< sc_logic > grp_matrix_multiply_alt2_fu_42_A_ce1;
    sc_signal< sc_lv<4> > grp_matrix_multiply_alt2_fu_42_C_address0;
    sc_signal< sc_logic > grp_matrix_multiply_alt2_fu_42_C_ce0;
    sc_signal< sc_logic > grp_matrix_multiply_alt2_fu_42_C_we0;
    sc_signal< sc_lv<32> > grp_matrix_multiply_alt2_fu_42_C_d0;
    sc_signal< sc_logic > grp_cholesky_alt4_fu_28_ap_start_reg;
    sc_signal< sc_logic > grp_back_substitute_alt_fu_36_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_logic > grp_matrix_multiply_alt2_fu_42_ap_start_reg;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > ap_NS_fsm;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > ap_return;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<6> ap_ST_fsm_state1;
    static const sc_lv<6> ap_ST_fsm_state2;
    static const sc_lv<6> ap_ST_fsm_state3;
    static const sc_lv<6> ap_ST_fsm_state4;
    static const sc_lv<6> ap_ST_fsm_state5;
    static const sc_lv<6> ap_ST_fsm_state6;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_InverseA_address0();
    void thread_InverseA_ce0();
    void thread_InverseA_d0();
    void thread_InverseA_we0();
    void thread_U_address0();
    void thread_U_ce0();
    void thread_U_inv_address0();
    void thread_U_inv_address1();
    void thread_U_inv_ce0();
    void thread_U_inv_ce1();
    void thread_U_inv_we0();
    void thread_U_inv_we1();
    void thread_U_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_start();
    void thread_grp_back_substitute_alt_fu_36_ap_start();
    void thread_grp_cholesky_alt4_fu_28_ap_start();
    void thread_grp_matrix_multiply_alt2_fu_42_ap_start();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
