// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _cholesky_inverse_top_HH_
#define _cholesky_inverse_top_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "cholesky_inverse_top_2.h"
#include "cholesky_inverse_ocq.h"
#include "cholesky_inverse_top_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct cholesky_inverse_top : public sc_module {
    // Port declarations 27
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_lv<4> > A_address0;
    sc_out< sc_logic > A_ce0;
    sc_in< sc_lv<32> > A_q0;
    sc_out< sc_lv<4> > InverseA_address0;
    sc_out< sc_logic > InverseA_ce0;
    sc_out< sc_logic > InverseA_we0;
    sc_out< sc_lv<32> > InverseA_d0;
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_out< sc_logic > interrupt;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    cholesky_inverse_top(sc_module_name name);
    SC_HAS_PROCESS(cholesky_inverse_top);

    ~cholesky_inverse_top();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    cholesky_inverse_top_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* cholesky_inverse_top_AXILiteS_s_axi_U;
    cholesky_inverse_ocq* a_i_U;
    cholesky_inverse_ocq* InverseA_assign_U;
    cholesky_inverse_top_2* grp_cholesky_inverse_top_2_fu_156;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_lv<3> > r_1_fu_168_p2;
    sc_signal< sc_lv<3> > r_1_reg_265;
    sc_signal< sc_logic > ap_CS_fsm_state2;
    sc_signal< sc_lv<6> > tmp_16_cast_fu_182_p1;
    sc_signal< sc_lv<6> > tmp_16_cast_reg_270;
    sc_signal< sc_lv<1> > tmp_fu_162_p2;
    sc_signal< sc_lv<3> > c_1_fu_192_p2;
    sc_signal< sc_lv<3> > c_1_reg_278;
    sc_signal< sc_logic > ap_CS_fsm_state3;
    sc_signal< sc_lv<64> > tmp_19_cast_fu_207_p1;
    sc_signal< sc_lv<64> > tmp_19_cast_reg_283;
    sc_signal< sc_lv<1> > tmp_2_fu_186_p2;
    sc_signal< sc_lv<32> > grp_cholesky_inverse_top_2_fu_156_ap_return;
    sc_signal< sc_lv<32> > inverse_OK_reg_293;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_logic > grp_cholesky_inverse_top_2_fu_156_ap_done;
    sc_signal< sc_lv<3> > r_2_fu_218_p2;
    sc_signal< sc_lv<3> > r_2_reg_300;
    sc_signal< sc_logic > ap_CS_fsm_state6;
    sc_signal< sc_lv<6> > tmp_18_cast_fu_232_p1;
    sc_signal< sc_lv<6> > tmp_18_cast_reg_305;
    sc_signal< sc_lv<1> > tmp_1_fu_212_p2;
    sc_signal< sc_lv<3> > c_2_fu_242_p2;
    sc_signal< sc_lv<3> > c_2_reg_313;
    sc_signal< sc_logic > ap_CS_fsm_state7;
    sc_signal< sc_lv<64> > tmp_20_cast_fu_257_p1;
    sc_signal< sc_lv<64> > tmp_20_cast_reg_318;
    sc_signal< sc_lv<1> > tmp_5_fu_236_p2;
    sc_signal< sc_lv<4> > a_i_address0;
    sc_signal< sc_logic > a_i_ce0;
    sc_signal< sc_logic > a_i_we0;
    sc_signal< sc_lv<32> > a_i_q0;
    sc_signal< sc_lv<4> > InverseA_assign_address0;
    sc_signal< sc_logic > InverseA_assign_ce0;
    sc_signal< sc_logic > InverseA_assign_we0;
    sc_signal< sc_lv<32> > InverseA_assign_q0;
    sc_signal< sc_lv<4> > grp_cholesky_inverse_top_2_fu_156_A_address0;
    sc_signal< sc_logic > grp_cholesky_inverse_top_2_fu_156_A_ce0;
    sc_signal< sc_lv<4> > grp_cholesky_inverse_top_2_fu_156_InverseA_address0;
    sc_signal< sc_logic > grp_cholesky_inverse_top_2_fu_156_InverseA_ce0;
    sc_signal< sc_logic > grp_cholesky_inverse_top_2_fu_156_InverseA_we0;
    sc_signal< sc_lv<32> > grp_cholesky_inverse_top_2_fu_156_InverseA_d0;
    sc_signal< sc_lv<3> > r_reg_112;
    sc_signal< sc_lv<3> > c_reg_123;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > r1_reg_134;
    sc_signal< sc_lv<3> > c2_reg_145;
    sc_signal< sc_logic > ap_CS_fsm_state8;
    sc_signal< sc_lv<5> > tmp_9_fu_174_p3;
    sc_signal< sc_lv<6> > tmp_4_cast_fu_198_p1;
    sc_signal< sc_lv<6> > tmp_11_fu_202_p2;
    sc_signal< sc_lv<5> > tmp_10_fu_224_p3;
    sc_signal< sc_lv<6> > tmp_6_cast_fu_248_p1;
    sc_signal< sc_lv<6> > tmp_12_fu_252_p2;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< sc_lv<32> > ap_return;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_state2;
    static const sc_lv<8> ap_ST_fsm_state3;
    static const sc_lv<8> ap_ST_fsm_state4;
    static const sc_lv<8> ap_ST_fsm_state5;
    static const sc_lv<8> ap_ST_fsm_state6;
    static const sc_lv<8> ap_ST_fsm_state7;
    static const sc_lv<8> ap_ST_fsm_state8;
    static const sc_lv<32> ap_const_lv32_0;
    static const int C_S_AXI_DATA_WIDTH;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_5;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<3> ap_const_lv3_0;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_7;
    static const sc_lv<3> ap_const_lv3_4;
    static const sc_lv<3> ap_const_lv3_1;
    static const sc_lv<2> ap_const_lv2_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_A_address0();
    void thread_A_ce0();
    void thread_InverseA_address0();
    void thread_InverseA_assign_address0();
    void thread_InverseA_assign_ce0();
    void thread_InverseA_assign_we0();
    void thread_InverseA_ce0();
    void thread_InverseA_d0();
    void thread_InverseA_we0();
    void thread_a_i_address0();
    void thread_a_i_ce0();
    void thread_a_i_we0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state2();
    void thread_ap_CS_fsm_state3();
    void thread_ap_CS_fsm_state4();
    void thread_ap_CS_fsm_state5();
    void thread_ap_CS_fsm_state6();
    void thread_ap_CS_fsm_state7();
    void thread_ap_CS_fsm_state8();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_c_1_fu_192_p2();
    void thread_c_2_fu_242_p2();
    void thread_grp_cholesky_inverse_top_2_fu_156_ap_done();
    void thread_grp_cholesky_inverse_top_2_fu_156_ap_return();
    void thread_r_1_fu_168_p2();
    void thread_r_2_fu_218_p2();
    void thread_tmp_10_fu_224_p3();
    void thread_tmp_11_fu_202_p2();
    void thread_tmp_12_fu_252_p2();
    void thread_tmp_16_cast_fu_182_p1();
    void thread_tmp_18_cast_fu_232_p1();
    void thread_tmp_19_cast_fu_207_p1();
    void thread_tmp_1_fu_212_p2();
    void thread_tmp_20_cast_fu_257_p1();
    void thread_tmp_2_fu_186_p2();
    void thread_tmp_4_cast_fu_198_p1();
    void thread_tmp_5_fu_236_p2();
    void thread_tmp_6_cast_fu_248_p1();
    void thread_tmp_9_fu_174_p3();
    void thread_tmp_fu_162_p2();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
