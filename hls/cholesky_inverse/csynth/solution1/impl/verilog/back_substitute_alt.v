// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module back_substitute_alt (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        A_address0,
        A_ce0,
        A_q0,
        B_address0,
        B_ce0,
        B_we0,
        B_d0,
        B_address1,
        B_ce1,
        B_we1,
        B_d1
);

parameter    ap_ST_fsm_state1 = 7'd1;
parameter    ap_ST_fsm_pp0_stage0 = 7'd2;
parameter    ap_ST_fsm_state8 = 7'd4;
parameter    ap_ST_fsm_state9 = 7'd8;
parameter    ap_ST_fsm_state10 = 7'd16;
parameter    ap_ST_fsm_pp1_stage0 = 7'd32;
parameter    ap_ST_fsm_state13 = 7'd64;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] B_address0;
output   B_ce0;
output   B_we0;
output  [31:0] B_d0;
output  [3:0] B_address1;
output   B_ce1;
output   B_we1;
output  [31:0] B_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[3:0] A_address0;
reg A_ce0;
reg B_ce0;
reg B_we0;
reg B_ce1;
reg B_we1;

(* fsm_encoding = "none" *) reg   [6:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [2:0] i_reg_161;
reg   [2:0] k_reg_195;
wire   [0:0] exitcond3_fu_229_p2;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state2_pp0_stage0_iter0;
wire    ap_block_state3_pp0_stage0_iter1;
wire    ap_block_state4_pp0_stage0_iter2;
wire    ap_block_state5_pp0_stage0_iter3;
wire    ap_block_state6_pp0_stage0_iter4;
wire    ap_block_state7_pp0_stage0_iter5;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] i_1_fu_235_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [1:0] tmp_fu_268_p1;
reg   [1:0] tmp_reg_690;
reg   [1:0] tmp_reg_690_pp0_iter1_reg;
reg   [1:0] tmp_reg_690_pp0_iter2_reg;
reg   [1:0] tmp_reg_690_pp0_iter3_reg;
reg   [1:0] tmp_reg_690_pp0_iter4_reg;
reg    ap_enable_reg_pp0_iter1;
wire   [2:0] i_2_fu_298_p2;
reg   [2:0] i_2_reg_726;
wire    ap_CS_fsm_state9;
wire   [5:0] tmp_20_cast_fu_316_p1;
reg   [5:0] tmp_20_cast_reg_731;
wire   [0:0] exitcond2_fu_292_p2;
wire   [5:0] tmp_43_cast_fu_328_p1;
reg   [5:0] tmp_43_cast_reg_737;
wire   [31:0] select_column_multip_fu_336_p6;
reg   [31:0] select_column_multip_reg_742;
wire   [0:0] exitcond1_fu_350_p2;
wire    ap_CS_fsm_state10;
wire   [2:0] j_1_fu_356_p2;
reg   [2:0] j_1_reg_752;
wire   [0:0] tmp_22_fu_362_p2;
wire   [0:0] tmp_23_fu_368_p2;
reg   [0:0] tmp_23_reg_761;
wire   [5:0] tmp_24_cast_fu_374_p1;
reg   [5:0] tmp_24_cast_reg_765;
reg   [3:0] A_addr_2_reg_771;
wire   [0:0] exitcond_fu_388_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state11_pp1_stage0_iter0;
wire    ap_block_state12_pp1_stage0_iter1;
wire    ap_block_pp1_stage0_11001;
wire   [2:0] k_2_fu_394_p2;
reg    ap_enable_reg_pp1_iter0;
wire   [0:0] tmp_25_fu_400_p2;
reg   [0:0] tmp_25_reg_785;
reg   [3:0] row_sum_addr_1_reg_789;
wire   [1:0] tmp_34_fu_428_p1;
reg   [1:0] tmp_34_reg_795;
wire   [0:0] grp_fu_223_p2;
reg   [0:0] tmp_29_reg_800;
reg   [0:0] tmp_27_reg_805;
wire   [5:0] tmp_43_fu_444_p2;
reg   [5:0] tmp_43_reg_810;
wire   [1:0] tmp_30_fu_459_p1;
reg   [1:0] tmp_30_reg_820;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state11;
reg    ap_enable_reg_pp1_iter1;
reg   [3:0] row_sum_address0;
reg    row_sum_ce0;
wire   [31:0] row_sum_q0;
reg    row_sum_ce1;
reg    row_sum_we1;
wire   [31:0] row_sum_d1;
reg   [2:0] i1_reg_172;
wire    ap_CS_fsm_state8;
reg   [2:0] j_reg_184;
wire    ap_CS_fsm_state13;
wire   [63:0] tmp_40_cast_fu_263_p1;
wire    ap_block_pp0_stage0;
wire   [63:0] tmp_44_cast_fu_383_p1;
wire   [63:0] tmp_54_cast_fu_423_p1;
wire    ap_block_pp1_stage0;
wire   [63:0] tmp_51_cast_fu_454_p1;
wire   [63:0] tmp_47_cast_fu_480_p1;
wire   [63:0] tmp_50_cast_fu_519_p1;
reg   [31:0] diag_3_fu_56;
wire   [31:0] grp_fu_217_p2;
reg   [31:0] diag_3_1_fu_60;
reg   [31:0] diag_3_2_fu_64;
reg   [31:0] diag_3_3_fu_68;
reg   [31:0] column_multiplier_0_1_fu_76;
wire   [31:0] column_multiplier_0_3_fu_624_p3;
reg   [31:0] column_multiplier_0_2_fu_80;
wire   [31:0] column_multiplier_0_16_fu_616_p3;
reg   [31:0] column_multiplier_0_5_fu_84;
wire   [31:0] column_multiplier_0_14_fu_600_p3;
reg   [31:0] column_multiplier_0_6_fu_88;
wire   [31:0] column_multiplier_0_7_fu_576_p3;
wire   [31:0] select_column_multip_1_fu_538_p3;
wire   [31:0] grp_fu_211_p2;
reg   [31:0] grp_fu_211_p0;
reg   [31:0] grp_fu_211_p1;
wire   [31:0] tmp_33_fu_497_p6;
wire   [31:0] tmp_31_fu_533_p1;
wire   [4:0] tmp_36_fu_245_p3;
wire   [5:0] tmp_39_cast_fu_253_p1;
wire   [5:0] tmp_cast_fu_241_p1;
wire   [5:0] tmp_37_fu_257_p2;
wire   [4:0] tmp_38_fu_320_p3;
wire   [1:0] select_column_multip_fu_336_p5;
wire   [5:0] tmp_39_fu_378_p2;
wire   [4:0] tmp_45_fu_406_p3;
wire   [5:0] tmp_53_cast_fu_414_p1;
wire   [5:0] tmp_46_fu_418_p2;
wire   [4:0] tmp_42_fu_432_p3;
wire   [5:0] tmp_49_cast_fu_440_p1;
wire   [5:0] tmp_44_fu_449_p2;
wire   [4:0] tmp_40_fu_463_p3;
wire   [5:0] tmp_46_cast_fu_471_p1;
wire   [5:0] tmp_41_fu_475_p2;
wire   [31:0] subst_sum_fu_206_p2;
wire   [31:0] tmp_32_to_int_fu_523_p1;
wire   [31:0] tmp_32_neg_fu_527_p2;
wire   [0:0] sel_tmp_fu_545_p2;
wire   [0:0] sel_tmp1_fu_558_p2;
wire   [31:0] column_multiplier_0_fu_550_p3;
wire   [0:0] sel_tmp3_fu_571_p2;
wire   [31:0] column_multiplier_0_4_fu_563_p3;
wire   [31:0] column_multiplier_0_8_fu_584_p3;
wire   [31:0] column_multiplier_0_9_fu_592_p3;
wire   [31:0] column_multiplier_0_15_fu_608_p3;
reg   [6:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;
reg    ap_condition_304;
reg    ap_condition_632;

// power-on initialization
initial begin
#0 ap_CS_fsm = 7'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
end

back_substitute_ahbi #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
row_sum_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(row_sum_address0),
    .ce0(row_sum_ce0),
    .q0(row_sum_q0),
    .address1(row_sum_addr_1_reg_789),
    .ce1(row_sum_ce1),
    .we1(row_sum_we1),
    .d1(row_sum_d1)
);

cholesky_inverse_ibs #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cholesky_inverse_ibs_U15(
    .din0(row_sum_q0),
    .din1(grp_fu_211_p2),
    .dout(subst_sum_fu_206_p2)
);

cholesky_inverse_dEe #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cholesky_inverse_dEe_U16(
    .din0(grp_fu_211_p0),
    .din1(grp_fu_211_p1),
    .dout(grp_fu_211_p2)
);

cholesky_inverse_jbC #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
cholesky_inverse_jbC_U17(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1065353216),
    .din1(A_q0),
    .ce(1'b1),
    .dout(grp_fu_217_p2)
);

cholesky_inverse_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
cholesky_inverse_kbM_U18(
    .din0(diag_3_fu_56),
    .din1(diag_3_1_fu_60),
    .din2(diag_3_2_fu_64),
    .din3(diag_3_3_fu_68),
    .din4(select_column_multip_fu_336_p5),
    .dout(select_column_multip_fu_336_p6)
);

cholesky_inverse_kbM #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
cholesky_inverse_kbM_U19(
    .din0(column_multiplier_0_1_fu_76),
    .din1(column_multiplier_0_2_fu_80),
    .din2(column_multiplier_0_5_fu_84),
    .din3(column_multiplier_0_6_fu_88),
    .din4(tmp_34_reg_795),
    .dout(tmp_33_fu_497_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state2)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state2);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if (((tmp_22_fu_362_p2 == 1'd0) & (exitcond1_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b1 == ap_condition_pp1_exit_iter0_state11) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
            ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state11);
        end else if ((1'b0 == ap_block_pp1_stage0_subdone)) begin
            ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
        end else if (((tmp_22_fu_362_p2 == 1'd0) & (exitcond1_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
            ap_enable_reg_pp1_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i1_reg_172 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state10) & (exitcond1_fu_350_p2 == 1'd1))) begin
        i1_reg_172 <= i_2_reg_726;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_fu_229_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_reg_161 <= i_1_fu_235_p2;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_reg_161 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        j_reg_184 <= j_1_reg_752;
    end else if (((exitcond2_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        j_reg_184 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_388_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        k_reg_195 <= k_2_fu_394_p2;
    end else if (((tmp_22_fu_362_p2 == 1'd0) & (exitcond1_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        k_reg_195 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_22_fu_362_p2 == 1'd0) & (exitcond1_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        A_addr_2_reg_771 <= tmp_44_cast_fu_383_p1;
        tmp_23_reg_761 <= tmp_23_fu_368_p2;
        tmp_24_cast_reg_765[2 : 0] <= tmp_24_cast_fu_374_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_25_reg_785 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (tmp_23_reg_761 == 1'd1))) begin
        column_multiplier_0_1_fu_76 <= column_multiplier_0_3_fu_624_p3;
        column_multiplier_0_2_fu_80 <= column_multiplier_0_16_fu_616_p3;
        column_multiplier_0_5_fu_84 <= column_multiplier_0_14_fu_600_p3;
        column_multiplier_0_6_fu_88 <= column_multiplier_0_7_fu_576_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_690_pp0_iter4_reg == 2'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        diag_3_1_fu_60 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_690_pp0_iter4_reg == 2'd2) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        diag_3_2_fu_64 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_690_pp0_iter4_reg == 2'd3) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        diag_3_3_fu_68 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_reg_690_pp0_iter4_reg == 2'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        diag_3_fu_56 <= grp_fu_217_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        i_2_reg_726 <= i_2_fu_298_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        j_1_reg_752 <= j_1_fu_356_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_25_fu_400_p2 == 1'd0) & (exitcond_fu_388_p2 == 1'd0) & (tmp_23_reg_761 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        row_sum_addr_1_reg_789 <= tmp_54_cast_fu_423_p1;
        tmp_34_reg_795 <= tmp_34_fu_428_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_292_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        select_column_multip_reg_742 <= select_column_multip_fu_336_p6;
        tmp_20_cast_reg_731[2 : 0] <= tmp_20_cast_fu_316_p1[2 : 0];
        tmp_43_cast_reg_737[4 : 2] <= tmp_43_cast_fu_328_p1[4 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_25_reg_785 <= tmp_25_fu_400_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_25_fu_400_p2 == 1'd0) & (exitcond_fu_388_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (tmp_23_reg_761 == 1'd1))) begin
        tmp_27_reg_805 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_25_fu_400_p2 == 1'd0) & (exitcond_fu_388_p2 == 1'd0) & (tmp_23_reg_761 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        tmp_29_reg_800 <= grp_fu_223_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_25_fu_400_p2 == 1'd0) & (exitcond_fu_388_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (tmp_23_reg_761 == 1'd1))) begin
        tmp_30_reg_820 <= tmp_30_fu_459_p1;
        tmp_43_reg_810 <= tmp_43_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond3_fu_229_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_690 <= tmp_fu_268_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        tmp_reg_690_pp0_iter1_reg <= tmp_reg_690;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        tmp_reg_690_pp0_iter2_reg <= tmp_reg_690_pp0_iter1_reg;
        tmp_reg_690_pp0_iter3_reg <= tmp_reg_690_pp0_iter2_reg;
        tmp_reg_690_pp0_iter4_reg <= tmp_reg_690_pp0_iter3_reg;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        A_address0 = A_addr_2_reg_771;
    end else if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        A_address0 = tmp_40_cast_fu_263_p1;
    end else begin
        A_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        A_ce0 = 1'b1;
    end else begin
        A_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        B_ce0 = 1'b1;
    end else begin
        B_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        B_ce1 = 1'b1;
    end else begin
        B_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((exitcond_fu_388_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (tmp_25_fu_400_p2 == 1'd1) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        B_we0 = 1'b1;
    end else begin
        B_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_25_reg_785 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (tmp_23_reg_761 == 1'd1))) begin
        B_we1 = 1'b1;
    end else begin
        B_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond3_fu_229_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond_fu_388_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state11 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state11 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state9) & (exitcond2_fu_292_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) & (exitcond2_fu_292_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_304)) begin
        if (((tmp_27_reg_805 == 1'd0) & (tmp_23_reg_761 == 1'd1))) begin
            grp_fu_211_p0 = select_column_multip_reg_742;
        end else if ((tmp_23_reg_761 == 1'd0)) begin
            grp_fu_211_p0 = A_q0;
        end else begin
            grp_fu_211_p0 = 'bx;
        end
    end else begin
        grp_fu_211_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_304)) begin
        if (((tmp_27_reg_805 == 1'd0) & (tmp_23_reg_761 == 1'd1))) begin
            grp_fu_211_p1 = tmp_31_fu_533_p1;
        end else if ((tmp_23_reg_761 == 1'd0)) begin
            grp_fu_211_p1 = tmp_33_fu_497_p6;
        end else begin
            grp_fu_211_p1 = 'bx;
        end
    end else begin
        grp_fu_211_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_condition_632)) begin
        if ((tmp_23_reg_761 == 1'd1)) begin
            row_sum_address0 = tmp_51_cast_fu_454_p1;
        end else if ((tmp_23_reg_761 == 1'd0)) begin
            row_sum_address0 = tmp_54_cast_fu_423_p1;
        end else begin
            row_sum_address0 = 'bx;
        end
    end else begin
        row_sum_address0 = 'bx;
    end
end

always @ (*) begin
    if ((((tmp_25_fu_400_p2 == 1'd0) & (exitcond_fu_388_p2 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001) & (tmp_23_reg_761 == 1'd1)) | ((tmp_25_fu_400_p2 == 1'd0) & (exitcond_fu_388_p2 == 1'd0) & (tmp_23_reg_761 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001)))) begin
        row_sum_ce0 = 1'b1;
    end else begin
        row_sum_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        row_sum_ce1 = 1'b1;
    end else begin
        row_sum_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_25_reg_785 == 1'd0) & (tmp_23_reg_761 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0_11001))) begin
        row_sum_we1 = 1'b1;
    end else begin
        row_sum_we1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond3_fu_229_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) & ~((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter1 == 1'b0) & (exitcond3_fu_229_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)) | ((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (exitcond2_fu_292_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((1'b1 == ap_CS_fsm_state10) & (exitcond1_fu_350_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else if (((tmp_22_fu_362_p2 == 1'd0) & (exitcond1_fu_350_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_pp1_stage0 : begin
            if (~((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_fu_388_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else if (((ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0_subdone) & (exitcond_fu_388_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign B_address0 = tmp_47_cast_fu_480_p1;

assign B_address1 = tmp_50_cast_fu_519_p1;

assign B_d0 = 32'd0;

assign B_d1 = select_column_multip_1_fu_538_p3;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_state11_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state12_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_condition_304 = ((tmp_25_reg_785 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

always @ (*) begin
    ap_condition_632 = ((tmp_25_fu_400_p2 == 1'd0) & (exitcond_fu_388_p2 == 1'd0) & (1'b0 == ap_block_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign column_multiplier_0_14_fu_600_p3 = ((sel_tmp3_fu_571_p2[0:0] === 1'b1) ? column_multiplier_0_5_fu_84 : column_multiplier_0_9_fu_592_p3);

assign column_multiplier_0_15_fu_608_p3 = ((sel_tmp1_fu_558_p2[0:0] === 1'b1) ? select_column_multip_1_fu_538_p3 : column_multiplier_0_2_fu_80);

assign column_multiplier_0_16_fu_616_p3 = ((sel_tmp3_fu_571_p2[0:0] === 1'b1) ? column_multiplier_0_2_fu_80 : column_multiplier_0_15_fu_608_p3);

assign column_multiplier_0_3_fu_624_p3 = ((sel_tmp3_fu_571_p2[0:0] === 1'b1) ? select_column_multip_1_fu_538_p3 : column_multiplier_0_1_fu_76);

assign column_multiplier_0_4_fu_563_p3 = ((sel_tmp1_fu_558_p2[0:0] === 1'b1) ? column_multiplier_0_6_fu_88 : column_multiplier_0_fu_550_p3);

assign column_multiplier_0_7_fu_576_p3 = ((sel_tmp3_fu_571_p2[0:0] === 1'b1) ? column_multiplier_0_6_fu_88 : column_multiplier_0_4_fu_563_p3);

assign column_multiplier_0_8_fu_584_p3 = ((sel_tmp_fu_545_p2[0:0] === 1'b1) ? select_column_multip_1_fu_538_p3 : column_multiplier_0_5_fu_84);

assign column_multiplier_0_9_fu_592_p3 = ((sel_tmp1_fu_558_p2[0:0] === 1'b1) ? column_multiplier_0_5_fu_84 : column_multiplier_0_8_fu_584_p3);

assign column_multiplier_0_fu_550_p3 = ((sel_tmp_fu_545_p2[0:0] === 1'b1) ? column_multiplier_0_6_fu_88 : select_column_multip_1_fu_538_p3);

assign exitcond1_fu_350_p2 = ((j_reg_184 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond2_fu_292_p2 = ((i1_reg_172 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond3_fu_229_p2 = ((i_reg_161 == 3'd4) ? 1'b1 : 1'b0);

assign exitcond_fu_388_p2 = ((k_reg_195 == 3'd4) ? 1'b1 : 1'b0);

assign grp_fu_223_p2 = ((k_reg_195 == i1_reg_172) ? 1'b1 : 1'b0);

assign i_1_fu_235_p2 = (i_reg_161 + 3'd1);

assign i_2_fu_298_p2 = (i1_reg_172 + 3'd1);

assign j_1_fu_356_p2 = (j_reg_184 + 3'd1);

assign k_2_fu_394_p2 = (k_reg_195 + 3'd1);

assign row_sum_d1 = ((tmp_29_reg_800[0:0] === 1'b1) ? grp_fu_211_p2 : subst_sum_fu_206_p2);

assign sel_tmp1_fu_558_p2 = ((tmp_30_reg_820 == 2'd1) ? 1'b1 : 1'b0);

assign sel_tmp3_fu_571_p2 = ((tmp_30_reg_820 == 2'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_545_p2 = ((tmp_30_reg_820 == 2'd2) ? 1'b1 : 1'b0);

assign select_column_multip_1_fu_538_p3 = ((tmp_27_reg_805[0:0] === 1'b1) ? select_column_multip_reg_742 : grp_fu_211_p2);

assign select_column_multip_fu_336_p5 = i1_reg_172[1:0];

assign tmp_20_cast_fu_316_p1 = i1_reg_172;

assign tmp_22_fu_362_p2 = ((j_reg_184 < i1_reg_172) ? 1'b1 : 1'b0);

assign tmp_23_fu_368_p2 = ((i1_reg_172 == j_reg_184) ? 1'b1 : 1'b0);

assign tmp_24_cast_fu_374_p1 = j_reg_184;

assign tmp_25_fu_400_p2 = ((k_reg_195 > i1_reg_172) ? 1'b1 : 1'b0);

assign tmp_30_fu_459_p1 = k_reg_195[1:0];

assign tmp_31_fu_533_p1 = tmp_32_neg_fu_527_p2;

assign tmp_32_neg_fu_527_p2 = (tmp_32_to_int_fu_523_p1 ^ 32'd2147483648);

assign tmp_32_to_int_fu_523_p1 = row_sum_q0;

assign tmp_34_fu_428_p1 = k_reg_195[1:0];

assign tmp_36_fu_245_p3 = {{i_reg_161}, {2'd0}};

assign tmp_37_fu_257_p2 = (tmp_39_cast_fu_253_p1 + tmp_cast_fu_241_p1);

assign tmp_38_fu_320_p3 = {{i1_reg_172}, {2'd0}};

assign tmp_39_cast_fu_253_p1 = tmp_36_fu_245_p3;

assign tmp_39_fu_378_p2 = (tmp_43_cast_reg_737 + tmp_24_cast_fu_374_p1);

assign tmp_40_cast_fu_263_p1 = tmp_37_fu_257_p2;

assign tmp_40_fu_463_p3 = {{k_reg_195}, {2'd0}};

assign tmp_41_fu_475_p2 = (tmp_20_cast_reg_731 + tmp_46_cast_fu_471_p1);

assign tmp_42_fu_432_p3 = {{k_reg_195}, {2'd0}};

assign tmp_43_cast_fu_328_p1 = tmp_38_fu_320_p3;

assign tmp_43_fu_444_p2 = (tmp_49_cast_fu_440_p1 + tmp_20_cast_reg_731);

assign tmp_44_cast_fu_383_p1 = tmp_39_fu_378_p2;

assign tmp_44_fu_449_p2 = (tmp_49_cast_fu_440_p1 + tmp_24_cast_reg_765);

assign tmp_45_fu_406_p3 = {{k_reg_195}, {2'd0}};

assign tmp_46_cast_fu_471_p1 = tmp_40_fu_463_p3;

assign tmp_46_fu_418_p2 = (tmp_53_cast_fu_414_p1 + tmp_24_cast_reg_765);

assign tmp_47_cast_fu_480_p1 = tmp_41_fu_475_p2;

assign tmp_49_cast_fu_440_p1 = tmp_42_fu_432_p3;

assign tmp_50_cast_fu_519_p1 = tmp_43_reg_810;

assign tmp_51_cast_fu_454_p1 = tmp_44_fu_449_p2;

assign tmp_53_cast_fu_414_p1 = tmp_45_fu_406_p3;

assign tmp_54_cast_fu_423_p1 = tmp_46_fu_418_p2;

assign tmp_cast_fu_241_p1 = i_reg_161;

assign tmp_fu_268_p1 = i_reg_161[1:0];

always @ (posedge ap_clk) begin
    tmp_20_cast_reg_731[5:3] <= 3'b000;
    tmp_43_cast_reg_737[1:0] <= 2'b00;
    tmp_43_cast_reg_737[5] <= 1'b0;
    tmp_24_cast_reg_765[5:3] <= 3'b000;
end

endmodule //back_substitute_alt
