-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matrix_multiply_alt2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    A_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce1 : OUT STD_LOGIC;
    A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
    C_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    C_ce0 : OUT STD_LOGIC;
    C_we0 : OUT STD_LOGIC;
    C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of matrix_multiply_alt2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv7_40 : STD_LOGIC_VECTOR (6 downto 0) := "1000000";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_10 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal indvar_flatten1_reg_115 : STD_LOGIC_VECTOR (6 downto 0);
    signal Col_assign_2_reg_126 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_reg_137 : STD_LOGIC_VECTOR (5 downto 0);
    signal Row_assign_reg_148 : STD_LOGIC_VECTOR (2 downto 0);
    signal Col_assign_reg_159 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_flatten1_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_flatten1_reg_397 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal indvar_flatten_next1_fu_191_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal tmp_mid2_fu_229_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_mid2_reg_406 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_fu_249_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid2_reg_410 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_i_i_mid2_v_fu_257_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_i_i_mid2_v_reg_414 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_fu_307_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_reg_419 : STD_LOGIC_VECTOR (2 downto 0);
    signal C_addr_reg_434 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_addr_reg_439 : STD_LOGIC_VECTOR (3 downto 0);
    signal c_fu_377_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten_next_fu_389_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal sum_mult_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal sum_mult_ce0 : STD_LOGIC;
    signal sum_mult_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_mult_ce1 : STD_LOGIC;
    signal sum_mult_we1 : STD_LOGIC;
    signal sum_mult_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_mux_Col_assign_2_phi_fu_130_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_Row_assign_phi_fu_152_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_cast_fu_333_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_cast_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_cast_fu_371_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mult_fu_177_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_flatten_fu_203_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal k_fu_197_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_mid1_fu_217_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp6_fu_223_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_1_mid1_fu_237_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_243_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal not_exitcond_flatten_fu_269_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Row_assign_mid_fu_209_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond_mid_fu_281_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_293_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal r_fu_287_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_1_fu_315_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_323_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_i_mid2_cast_fu_265_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_3_fu_327_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal Col_assign_mid2_fu_299_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_4_fu_342_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_12_cast_fu_350_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_5_fu_354_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_i_i2_cast_fu_338_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_8_fu_365_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvar_flatten_op_fu_383_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_131 : BOOLEAN;

    component cholesky_inverse_ibs IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cholesky_inverse_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component back_substitute_ahbi IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    sum_mult_U : component back_substitute_ahbi
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => sum_mult_address0,
        ce0 => sum_mult_ce0,
        q0 => sum_mult_q0,
        address1 => sum_mult_addr_reg_439,
        ce1 => sum_mult_ce1,
        we1 => sum_mult_we1,
        d1 => sum_mult_d1);

    cholesky_inverse_ibs_U26 : component cholesky_inverse_ibs
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => sum_mult_q0,
        din1 => mult_fu_177_p2,
        dout => tmp_7_fu_170_p2);

    cholesky_inverse_dEe_U27 : component cholesky_inverse_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => A_q0,
        din1 => A_q1,
        dout => mult_fu_177_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    Col_assign_2_reg_126_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_397 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                Col_assign_2_reg_126 <= tmp_i_i_mid2_v_reg_414;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                Col_assign_2_reg_126 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    Col_assign_reg_159_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                Col_assign_reg_159 <= c_fu_377_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                Col_assign_reg_159 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    Row_assign_reg_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_reg_397 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                Row_assign_reg_148 <= tmp_reg_419;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                Row_assign_reg_148 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvar_flatten1_reg_115_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten1_reg_115 <= indvar_flatten_next1_fu_191_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten1_reg_115 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_137_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                indvar_flatten_reg_137 <= indvar_flatten_next_fu_389_p3;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                indvar_flatten_reg_137 <= ap_const_lv6_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_185_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                C_addr_reg_434 <= tmp_14_cast_fu_371_p1(4 - 1 downto 0);
                sum_mult_addr_reg_439 <= tmp_14_cast_fu_371_p1(4 - 1 downto 0);
                tmp_1_mid2_reg_410 <= tmp_1_mid2_fu_249_p3;
                tmp_mid2_reg_406 <= tmp_mid2_fu_229_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_flatten1_reg_397 <= exitcond_flatten1_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_flatten1_fu_185_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                tmp_i_i_mid2_v_reg_414 <= tmp_i_i_mid2_v_fu_257_p3;
                tmp_reg_419 <= tmp_fu_307_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_flatten1_fu_185_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten1_fu_185_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond_flatten1_fu_185_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    A_address0 <= tmp_10_cast_fu_333_p1(4 - 1 downto 0);
    A_address1 <= tmp_13_cast_fu_360_p1(4 - 1 downto 0);

    A_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    A_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            A_ce1 <= ap_const_logic_1;
        else 
            A_ce1 <= ap_const_logic_0;
        end if; 
    end process;

    C_address0 <= C_addr_reg_434;

    C_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            C_ce0 <= ap_const_logic_1;
        else 
            C_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    C_d0 <= tmp_7_fu_170_p2;

    C_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_mid2_reg_406, tmp_1_mid2_reg_410, ap_enable_reg_pp0_iter1)
    begin
        if (((tmp_1_mid2_reg_410 = ap_const_lv1_1) and (tmp_mid2_reg_406 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
            C_we0 <= ap_const_logic_1;
        else 
            C_we0 <= ap_const_logic_0;
        end if; 
    end process;

    Col_assign_mid2_fu_299_p3 <= 
        ap_const_lv3_0 when (tmp_2_fu_293_p2(0) = '1') else 
        Col_assign_reg_159;
    Row_assign_mid_fu_209_p3 <= 
        ap_const_lv3_0 when (exitcond_flatten_fu_203_p2(0) = '1') else 
        ap_phi_mux_Row_assign_phi_fu_152_p4;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_131_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_131 <= ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_flatten1_fu_185_p2)
    begin
        if ((exitcond_flatten1_fu_185_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_Col_assign_2_phi_fu_130_p4_assign_proc : process(Col_assign_2_reg_126, exitcond_flatten1_reg_397, ap_CS_fsm_pp0_stage0, tmp_i_i_mid2_v_reg_414, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_397 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_Col_assign_2_phi_fu_130_p4 <= tmp_i_i_mid2_v_reg_414;
        else 
            ap_phi_mux_Col_assign_2_phi_fu_130_p4 <= Col_assign_2_reg_126;
        end if; 
    end process;


    ap_phi_mux_Row_assign_phi_fu_152_p4_assign_proc : process(Row_assign_reg_148, exitcond_flatten1_reg_397, ap_CS_fsm_pp0_stage0, tmp_reg_419, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
        if (((exitcond_flatten1_reg_397 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_phi_mux_Row_assign_phi_fu_152_p4 <= tmp_reg_419;
        else 
            ap_phi_mux_Row_assign_phi_fu_152_p4 <= Row_assign_reg_148;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    c_fu_377_p2 <= std_logic_vector(unsigned(Col_assign_mid2_fu_299_p3) + unsigned(ap_const_lv3_1));
    exitcond_flatten1_fu_185_p2 <= "1" when (indvar_flatten1_reg_115 = ap_const_lv7_40) else "0";
    exitcond_flatten_fu_203_p2 <= "1" when (indvar_flatten_reg_137 = ap_const_lv6_10) else "0";
    exitcond_fu_275_p2 <= "1" when (Col_assign_reg_159 = ap_const_lv3_4) else "0";
    exitcond_mid_fu_281_p2 <= (not_exitcond_flatten_fu_269_p2 and exitcond_fu_275_p2);
    indvar_flatten_next1_fu_191_p2 <= std_logic_vector(unsigned(indvar_flatten1_reg_115) + unsigned(ap_const_lv7_1));
    indvar_flatten_next_fu_389_p3 <= 
        ap_const_lv6_1 when (exitcond_flatten_fu_203_p2(0) = '1') else 
        indvar_flatten_op_fu_383_p2;
    indvar_flatten_op_fu_383_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_137) + unsigned(ap_const_lv6_1));
    k_fu_197_p2 <= std_logic_vector(unsigned(ap_phi_mux_Col_assign_2_phi_fu_130_p4) + unsigned(ap_const_lv3_1));
    not_exitcond_flatten_fu_269_p2 <= (exitcond_flatten_fu_203_p2 xor ap_const_lv1_1);
    r_fu_287_p2 <= std_logic_vector(unsigned(Row_assign_mid_fu_209_p3) + unsigned(ap_const_lv3_1));
    sum_mult_address0 <= tmp_14_cast_fu_371_p1(4 - 1 downto 0);

    sum_mult_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            sum_mult_ce0 <= ap_const_logic_1;
        else 
            sum_mult_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    sum_mult_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_mid2_reg_406, tmp_1_mid2_reg_410, ap_enable_reg_pp0_iter1)
    begin
        if ((((tmp_mid2_reg_406 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((tmp_1_mid2_reg_410 = ap_const_lv1_0) and (tmp_mid2_reg_406 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            sum_mult_ce1 <= ap_const_logic_1;
        else 
            sum_mult_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    sum_mult_d1_assign_proc : process(tmp_mid2_reg_406, tmp_1_mid2_reg_410, tmp_7_fu_170_p2, mult_fu_177_p2, ap_condition_131)
    begin
        if ((ap_const_boolean_1 = ap_condition_131)) then
            if ((tmp_mid2_reg_406 = ap_const_lv1_1)) then 
                sum_mult_d1 <= mult_fu_177_p2;
            elsif (((tmp_1_mid2_reg_410 = ap_const_lv1_0) and (tmp_mid2_reg_406 = ap_const_lv1_0))) then 
                sum_mult_d1 <= tmp_7_fu_170_p2;
            else 
                sum_mult_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            end if;
        else 
            sum_mult_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    sum_mult_we1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, tmp_mid2_reg_406, tmp_1_mid2_reg_410, ap_enable_reg_pp0_iter1)
    begin
        if ((((tmp_mid2_reg_406 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((tmp_1_mid2_reg_410 = ap_const_lv1_0) and (tmp_mid2_reg_406 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)))) then 
            sum_mult_we1 <= ap_const_logic_1;
        else 
            sum_mult_we1 <= ap_const_logic_0;
        end if; 
    end process;

    tmp6_fu_223_p2 <= "1" when (ap_phi_mux_Col_assign_2_phi_fu_130_p4 = ap_const_lv3_0) else "0";
    tmp_10_cast_fu_333_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_3_fu_327_p2),64));
    tmp_12_cast_fu_350_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_4_fu_342_p3),6));
    tmp_13_cast_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_5_fu_354_p2),64));
    tmp_14_cast_fu_371_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_8_fu_365_p2),64));
    tmp_1_fu_315_p3 <= (tmp_fu_307_p3 & ap_const_lv2_0);
    tmp_1_mid1_fu_237_p2 <= "1" when (k_fu_197_p2 = ap_const_lv3_3) else "0";
    tmp_1_mid2_fu_249_p3 <= 
        tmp_1_mid1_fu_237_p2 when (exitcond_flatten_fu_203_p2(0) = '1') else 
        tmp_s_fu_243_p2;
    tmp_2_fu_293_p2 <= (exitcond_mid_fu_281_p2 or exitcond_flatten_fu_203_p2);
    tmp_3_fu_327_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_323_p1) + unsigned(tmp_i_i_mid2_cast_fu_265_p1));
    tmp_4_fu_342_p3 <= (Col_assign_mid2_fu_299_p3 & ap_const_lv2_0);
    tmp_5_fu_354_p2 <= std_logic_vector(unsigned(tmp_12_cast_fu_350_p1) + unsigned(tmp_i_i_mid2_cast_fu_265_p1));
    tmp_8_fu_365_p2 <= std_logic_vector(unsigned(tmp_9_cast_fu_323_p1) + unsigned(tmp_i_i2_cast_fu_338_p1));
    tmp_9_cast_fu_323_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_315_p3),6));
    tmp_fu_307_p3 <= 
        r_fu_287_p2 when (exitcond_mid_fu_281_p2(0) = '1') else 
        Row_assign_mid_fu_209_p3;
    tmp_i_i2_cast_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(Col_assign_mid2_fu_299_p3),6));
    tmp_i_i_mid2_cast_fu_265_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_i_mid2_v_fu_257_p3),6));
    tmp_i_i_mid2_v_fu_257_p3 <= 
        k_fu_197_p2 when (exitcond_flatten_fu_203_p2(0) = '1') else 
        ap_phi_mux_Col_assign_2_phi_fu_130_p4;
    tmp_mid1_fu_217_p2 <= "1" when (k_fu_197_p2 = ap_const_lv3_0) else "0";
    tmp_mid2_fu_229_p3 <= 
        tmp_mid1_fu_217_p2 when (exitcond_flatten_fu_203_p2(0) = '1') else 
        tmp6_fu_223_p2;
    tmp_s_fu_243_p2 <= "1" when (ap_phi_mux_Col_assign_2_phi_fu_130_p4 = ap_const_lv3_3) else "0";
end behav;
