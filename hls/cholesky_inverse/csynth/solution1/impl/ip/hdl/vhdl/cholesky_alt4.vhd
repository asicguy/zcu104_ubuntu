-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cholesky_alt4 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    L_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    L_ce0 : OUT STD_LOGIC;
    L_we0 : OUT STD_LOGIC;
    L_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cholesky_alt4 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (12 downto 0) := "0000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (12 downto 0) := "0000000001000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (12 downto 0) := "0000000010000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (12 downto 0) := "0000000100000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (12 downto 0) := "0000001000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (12 downto 0) := "0000010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (12 downto 0) := "0000100000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (12 downto 0) := "0001000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (12 downto 0) := "0010000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (12 downto 0) := "0100000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (12 downto 0) := "1000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv2_3 : STD_LOGIC_VECTOR (1 downto 0) := "11";
    constant ap_const_lv32_80000000 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv5_4 : STD_LOGIC_VECTOR (4 downto 0) := "00100";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (12 downto 0) := "0000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal prod_cast_to_off_dia_reg_253 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_263 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_fu_335_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_reg_819 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_off_fu_435_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_off_reg_824 : STD_LOGIC_VECTOR (5 downto 0);
    signal exitcond4_fu_329_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_cast1_fu_441_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast1_reg_830 : STD_LOGIC_VECTOR (4 downto 0);
    signal A_addr_reg_835 : STD_LOGIC_VECTOR (3 downto 0);
    signal L_addr_reg_840 : STD_LOGIC_VECTOR (3 downto 0);
    signal j_fu_483_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_reg_848 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal exitcond3_fu_477_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal L_addr_1_reg_858 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvars_iv_cast1_fu_512_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv_cast1_reg_863 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal j_sub1_cast20_cast_fu_522_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_sub1_cast20_cast_reg_868 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_fu_606_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_9_cast_reg_873 : STD_LOGIC_VECTOR (4 downto 0);
    signal L_addr_2_reg_878 : STD_LOGIC_VECTOR (3 downto 0);
    signal exitcond_fu_623_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_888 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state5_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal k_1_fu_629_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal grp_fu_288_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_12_fu_683_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_12_reg_912 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal square_sum_1_reg_917 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal A_minus_sum_reg_922 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal tmp_25_fu_727_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_25_reg_928 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_0_i_fu_733_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_0_i_reg_933 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_26_fu_741_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_26_reg_938 : STD_LOGIC_VECTOR (1 downto 0);
    signal diag_internal_2_3_fu_784_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal diag_internal_2_6_fu_800_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal diag_internal_2_8_fu_808_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state5 : STD_LOGIC;
    signal L_internal_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal L_internal_ce0 : STD_LOGIC;
    signal L_internal_we0 : STD_LOGIC;
    signal L_internal_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal L_internal_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal L_internal_ce1 : STD_LOGIC;
    signal L_internal_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal diag_internal_2_s_reg_169 : STD_LOGIC_VECTOR (31 downto 0);
    signal diag_internal_2_4_reg_181 : STD_LOGIC_VECTOR (31 downto 0);
    signal diag_internal_2_7_reg_193 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv1_reg_205 : STD_LOGIC_VECTOR (2 downto 0);
    signal return_code_reg_217 : STD_LOGIC_VECTOR (31 downto 0);
    signal indvars_iv_reg_229 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal square_sum_reg_241 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal L_diag_recip_reg_274 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_cast_fu_467_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_cast_fu_506_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_618_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_648_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_fu_663_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_13_fu_687_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_296_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal new_L_fu_745_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_288_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_288_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_i_fu_306_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_296_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_16_fu_678_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal i_sub1_fu_341_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_cast_fu_355_p0 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_sub1_cast_fu_351_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_cast_fu_355_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_cast_fu_355_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_s_fu_361_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_neg_fu_375_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_381_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_10_fu_391_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_fu_395_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_19_fu_405_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_20_fu_415_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_fu_367_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t_fu_399_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_lshr_f_fu_419_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_4_fu_423_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_sub1_cast1_fu_347_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_cast_fu_431_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_449_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_2_cast_fu_445_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_cast_fu_457_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_21_fu_461_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal indvars_iv_cast_cast_fu_473_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_32_fu_489_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_34_cast_fu_497_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_33_fu_501_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_sub1_fu_516_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_cast_fu_530_p0 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_sub1_cast_fu_526_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_7_cast_fu_530_p1 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_7_cast_fu_530_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_8_fu_536_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_neg1_fu_550_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_28_fu_556_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_29_fu_566_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal p_lshr1_fu_570_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_30_fu_580_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal tmp_31_fu_590_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_27_fu_542_p3 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_neg_t1_fu_574_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal p_lshr_f1_fu_594_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_6_fu_598_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_34_fu_610_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_cast1_fu_639_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_14_fu_643_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal k_cast_fu_635_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp18_fu_653_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_fu_658_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_17_to_int_fu_668_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_17_neg_fu_672_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal A_minus_sum_to_int_fu_691_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_22_fu_695_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_9_fu_705_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_715_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_721_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_24_fu_313_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_319_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp_fu_753_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_324_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp2_fu_766_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal diag_internal_2_1_fu_758_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sel_tmp4_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal diag_internal_2_2_fu_771_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal diag_internal_2_5_fu_792_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_288_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_return_preg : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component cholesky_inverse_cud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cholesky_inverse_dEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cholesky_inverse_eOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component cholesky_inverse_fYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cholesky_inverse_g8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cholesky_alt4_L_ibkb IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    L_internal_U : component cholesky_alt4_L_ibkb
    generic map (
        DataWidth => 32,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => L_internal_address0,
        ce0 => L_internal_ce0,
        we0 => L_internal_we0,
        d0 => grp_fu_296_p2,
        q0 => L_internal_q0,
        address1 => L_internal_address1,
        ce1 => L_internal_ce1,
        q1 => L_internal_q1);

    cholesky_inverse_cud_U1 : component cholesky_inverse_cud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_288_p0,
        din1 => grp_fu_288_p1,
        opcode => grp_fu_288_opcode,
        dout => grp_fu_288_p2);

    cholesky_inverse_dEe_U2 : component cholesky_inverse_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_296_p0,
        din1 => grp_fu_296_p1,
        dout => grp_fu_296_p2);

    cholesky_inverse_dEe_U3 : component cholesky_inverse_dEe
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_296_p2,
        din1 => grp_fu_296_p2,
        dout => tmp_i_fu_306_p2);

    cholesky_inverse_eOg_U4 : component cholesky_inverse_eOg
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => grp_fu_288_p2,
        din1 => ap_const_lv32_0,
        opcode => ap_const_lv5_4,
        dout => tmp_24_fu_313_p2);

    cholesky_inverse_fYi_U5 : component cholesky_inverse_fYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => A_minus_sum_reg_922,
        ce => ap_const_logic_1,
        dout => grp_fu_319_p2);

    cholesky_inverse_g8j_U6 : component cholesky_inverse_g8j
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => A_minus_sum_reg_922,
        ce => ap_const_logic_1,
        dout => grp_fu_324_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state5) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state5);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv32_0;
            else
                if (((exitcond4_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= return_code_reg_217;
                end if; 
            end if;
        end if;
    end process;


    L_diag_recip_reg_274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                if ((indvars_iv_reg_229 = ap_const_lv2_0)) then 
                    L_diag_recip_reg_274 <= diag_internal_2_7_reg_193;
                elsif ((not((indvars_iv_reg_229 = ap_const_lv2_0)) and not((indvars_iv_reg_229 = ap_const_lv2_1)))) then 
                    L_diag_recip_reg_274 <= diag_internal_2_s_reg_169;
                elsif ((indvars_iv_reg_229 = ap_const_lv2_1)) then 
                    L_diag_recip_reg_274 <= diag_internal_2_4_reg_181;
                end if;
            end if; 
        end if;
    end process;

    indvars_iv1_reg_205_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                indvars_iv1_reg_205 <= i_reg_819;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                indvars_iv1_reg_205 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    indvars_iv_reg_229_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                indvars_iv_reg_229 <= j_reg_848;
            elsif (((exitcond4_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                indvars_iv_reg_229 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    k_reg_263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_623_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                k_reg_263 <= k_1_fu_629_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                k_reg_263 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    prod_cast_to_off_dia_reg_253_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_888 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                prod_cast_to_off_dia_reg_253 <= grp_fu_288_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
                prod_cast_to_off_dia_reg_253 <= A_q0;
            end if; 
        end if;
    end process;

    return_code_reg_217_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
                return_code_reg_217 <= p_0_i_reg_933;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                return_code_reg_217 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;

    square_sum_reg_241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                square_sum_reg_241 <= square_sum_1_reg_917;
            elsif (((exitcond4_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                square_sum_reg_241 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_329_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                A_addr_reg_835 <= tmp_22_cast_fu_467_p1(4 - 1 downto 0);
                L_addr_reg_840 <= tmp_22_cast_fu_467_p1(4 - 1 downto 0);
                i_off_reg_824 <= i_off_fu_435_p2;
                    tmp_2_cast1_reg_830(2 downto 0) <= tmp_2_cast1_fu_441_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then
                A_minus_sum_reg_922 <= grp_fu_288_p2;
                p_0_i_reg_933 <= p_0_i_fu_733_p3;
                tmp_25_reg_928 <= tmp_25_fu_727_p2;
                tmp_26_reg_938 <= tmp_26_fu_741_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond3_fu_477_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                L_addr_1_reg_858 <= tmp_35_cast_fu_506_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                L_addr_2_reg_878 <= tmp_35_fu_618_p1(4 - 1 downto 0);
                    indvars_iv_cast1_reg_863(1 downto 0) <= indvars_iv_cast1_fu_512_p1(1 downto 0);
                j_sub1_cast20_cast_reg_868 <= j_sub1_cast20_cast_fu_522_p1;
                tmp_9_cast_reg_873 <= tmp_9_cast_fu_606_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state14)) then
                diag_internal_2_4_reg_181 <= diag_internal_2_6_fu_800_p3;
                diag_internal_2_7_reg_193 <= diag_internal_2_8_fu_808_p3;
                diag_internal_2_s_reg_169 <= diag_internal_2_3_fu_784_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_888 <= exitcond_fu_623_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_reg_819 <= i_fu_335_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                j_reg_848 <= j_fu_483_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                square_sum_1_reg_917 <= grp_fu_288_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                tmp_12_reg_912 <= tmp_12_fu_683_p2;
            end if;
        end if;
    end process;
    tmp_2_cast1_reg_830(4 downto 3) <= "00";
    indvars_iv_cast1_reg_863(5 downto 2) <= "0000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_329_p2, ap_CS_fsm_state3, exitcond3_fu_477_p2, exitcond_fu_623_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond4_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((exitcond3_fu_477_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond_fu_623_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond_fu_623_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state2;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXX";
        end case;
    end process;

    A_address0_assign_proc : process(A_addr_reg_835, ap_CS_fsm_state3, exitcond3_fu_477_p2, tmp_35_cast_fu_506_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
            if ((exitcond3_fu_477_p2 = ap_const_lv1_1)) then 
                A_address0 <= A_addr_reg_835;
            elsif ((exitcond3_fu_477_p2 = ap_const_lv1_0)) then 
                A_address0 <= tmp_35_cast_fu_506_p1(4 - 1 downto 0);
            else 
                A_address0 <= "XXXX";
            end if;
        else 
            A_address0 <= "XXXX";
        end if; 
    end process;


    A_ce0_assign_proc : process(ap_CS_fsm_state3, exitcond3_fu_477_p2)
    begin
        if ((((exitcond3_fu_477_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((exitcond3_fu_477_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            A_ce0 <= ap_const_logic_1;
        else 
            A_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    A_minus_sum_to_int_fu_691_p1 <= grp_fu_288_p2;

    L_address0_assign_proc : process(L_addr_reg_840, L_addr_1_reg_858, L_addr_2_reg_878, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            L_address0 <= L_addr_reg_840;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            L_address0 <= L_addr_2_reg_878;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            L_address0 <= L_addr_1_reg_858;
        else 
            L_address0 <= "XXXX";
        end if; 
    end process;


    L_ce0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            L_ce0 <= ap_const_logic_1;
        else 
            L_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_d0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, grp_fu_296_p2, ap_CS_fsm_state13, new_L_fu_745_p3)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            L_d0 <= new_L_fu_745_p3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            L_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            L_d0 <= grp_fu_296_p2;
        else 
            L_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    L_internal_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_CS_fsm_state8, ap_block_pp0_stage0, tmp_15_fu_648_p1, tmp_13_fu_687_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            L_internal_address0 <= tmp_13_fu_687_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            L_internal_address0 <= tmp_15_fu_648_p1(3 - 1 downto 0);
        else 
            L_internal_address0 <= "XXX";
        end if; 
    end process;

    L_internal_address1 <= tmp_18_fu_663_p1(3 - 1 downto 0);

    L_internal_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state8)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state8) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            L_internal_ce0 <= ap_const_logic_1;
        else 
            L_internal_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    L_internal_ce1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            L_internal_ce1 <= ap_const_logic_1;
        else 
            L_internal_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    L_internal_we0_assign_proc : process(ap_CS_fsm_state8)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            L_internal_we0 <= ap_const_logic_1;
        else 
            L_internal_we0 <= ap_const_logic_0;
        end if; 
    end process;


    L_we0_assign_proc : process(ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8))) then 
            L_we0 <= ap_const_logic_1;
        else 
            L_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(4);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state11 <= ap_CS_fsm(9);
    ap_CS_fsm_state13 <= ap_CS_fsm(11);
    ap_CS_fsm_state14 <= ap_CS_fsm(12);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state7 <= ap_CS_fsm(5);
    ap_CS_fsm_state8 <= ap_CS_fsm(6);
    ap_CS_fsm_state9 <= ap_CS_fsm(7);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state5_assign_proc : process(exitcond_fu_623_p2)
    begin
        if ((exitcond_fu_623_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond4_fu_329_p2)
    begin
        if ((((exitcond4_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_329_p2)
    begin
        if (((exitcond4_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, exitcond4_fu_329_p2, return_code_reg_217, ap_return_preg)
    begin
        if (((exitcond4_fu_329_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= return_code_reg_217;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    diag_internal_2_1_fu_758_p3 <= 
        grp_fu_324_p2 when (sel_tmp_fu_753_p2(0) = '1') else 
        diag_internal_2_s_reg_169;
    diag_internal_2_2_fu_771_p3 <= 
        diag_internal_2_s_reg_169 when (sel_tmp2_fu_766_p2(0) = '1') else 
        diag_internal_2_1_fu_758_p3;
    diag_internal_2_3_fu_784_p3 <= 
        diag_internal_2_s_reg_169 when (sel_tmp4_fu_779_p2(0) = '1') else 
        diag_internal_2_2_fu_771_p3;
    diag_internal_2_5_fu_792_p3 <= 
        grp_fu_324_p2 when (sel_tmp2_fu_766_p2(0) = '1') else 
        diag_internal_2_4_reg_181;
    diag_internal_2_6_fu_800_p3 <= 
        diag_internal_2_4_reg_181 when (sel_tmp4_fu_779_p2(0) = '1') else 
        diag_internal_2_5_fu_792_p3;
    diag_internal_2_8_fu_808_p3 <= 
        grp_fu_324_p2 when (sel_tmp4_fu_779_p2(0) = '1') else 
        diag_internal_2_7_reg_193;
    exitcond3_fu_477_p2 <= "1" when (indvars_iv_cast_cast_fu_473_p1 = indvars_iv1_reg_205) else "0";
    exitcond4_fu_329_p2 <= "1" when (indvars_iv1_reg_205 = ap_const_lv3_4) else "0";
    exitcond_fu_623_p2 <= "1" when (k_reg_263 = indvars_iv_reg_229) else "0";

    grp_fu_288_opcode_assign_proc : process(exitcond_reg_888, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_CS_fsm_state10, ap_block_pp0_stage0_00001)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_288_opcode <= ap_const_lv2_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state8) or ((exitcond_reg_888 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_00001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_288_opcode <= ap_const_lv2_0;
        else 
            grp_fu_288_opcode <= "XX";
        end if; 
    end process;


    grp_fu_288_p0_assign_proc : process(A_q0, prod_cast_to_off_dia_reg_253, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_CS_fsm_state10, square_sum_reg_241, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_288_p0 <= A_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_288_p0 <= square_sum_reg_241;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_288_p0 <= prod_cast_to_off_dia_reg_253;
        else 
            grp_fu_288_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_288_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_CS_fsm_state10, square_sum_reg_241, ap_block_pp0_stage0, grp_fu_296_p2, tmp_i_fu_306_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_288_p1 <= square_sum_reg_241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_288_p1 <= tmp_i_fu_306_p2;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_288_p1 <= grp_fu_296_p2;
        else 
            grp_fu_288_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_296_p0_assign_proc : process(prod_cast_to_off_dia_reg_253, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, L_internal_q1, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_296_p0 <= prod_cast_to_off_dia_reg_253;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_296_p0 <= L_internal_q1;
        else 
            grp_fu_296_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_296_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state8, ap_block_pp0_stage0, L_diag_recip_reg_274, tmp_16_fu_678_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            grp_fu_296_p1 <= L_diag_recip_reg_274;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_296_p1 <= tmp_16_fu_678_p1;
        else 
            grp_fu_296_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_335_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_205) + unsigned(ap_const_lv3_1));
    i_off_fu_435_p2 <= std_logic_vector(signed(i_sub1_cast1_fu_347_p1) + signed(tmp_1_cast_fu_431_p1));
        i_sub1_cast1_fu_347_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_sub1_fu_341_p2),6));

        i_sub1_cast_fu_351_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(i_sub1_fu_341_p2),4));

    i_sub1_fu_341_p2 <= std_logic_vector(unsigned(indvars_iv1_reg_205) + unsigned(ap_const_lv3_7));
    indvars_iv_cast1_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_reg_229),6));
    indvars_iv_cast_cast_fu_473_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv_reg_229),3));
    j_fu_483_p2 <= std_logic_vector(unsigned(indvars_iv_reg_229) + unsigned(ap_const_lv2_1));
        j_sub1_cast20_cast_fu_522_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_sub1_fu_516_p2),5));

        j_sub1_cast_fu_526_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_sub1_fu_516_p2),3));

    j_sub1_fu_516_p2 <= std_logic_vector(unsigned(indvars_iv_reg_229) + unsigned(ap_const_lv2_3));
    k_1_fu_629_p2 <= std_logic_vector(unsigned(k_reg_263) + unsigned(ap_const_lv2_1));
    k_cast1_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_263),6));
    k_cast_fu_635_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_reg_263),5));
    new_L_fu_745_p3 <= 
        ap_const_lv32_0 when (tmp_25_reg_928(0) = '1') else 
        grp_fu_319_p2;
    notlhs_fu_709_p2 <= "0" when (tmp_22_fu_695_p4 = ap_const_lv8_FF) else "1";
    notrhs_fu_715_p2 <= "1" when (tmp_9_fu_705_p1 = ap_const_lv23_0) else "0";
    p_0_i_fu_733_p3 <= 
        ap_const_lv32_1 when (tmp_25_fu_727_p2(0) = '1') else 
        return_code_reg_217;
    p_lshr1_fu_570_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_29_fu_566_p1),4));
    p_lshr_f1_fu_594_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_31_fu_590_p1),4));
    p_lshr_f_fu_419_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_20_fu_415_p1),5));
    p_lshr_fu_395_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_10_fu_391_p1),5));
    p_neg1_fu_550_p2 <= std_logic_vector(unsigned(ap_const_lv3_0) - unsigned(tmp_8_fu_536_p2));
    p_neg_fu_375_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(tmp_s_fu_361_p2));
    p_neg_t1_fu_574_p2 <= std_logic_vector(unsigned(ap_const_lv4_0) - unsigned(p_lshr1_fu_570_p1));
    p_neg_t_fu_399_p2 <= std_logic_vector(unsigned(ap_const_lv5_0) - unsigned(p_lshr_fu_395_p1));
    sel_tmp2_fu_766_p2 <= "1" when (tmp_26_reg_938 = ap_const_lv2_1) else "0";
    sel_tmp4_fu_779_p2 <= "1" when (tmp_26_reg_938 = ap_const_lv2_0) else "0";
    sel_tmp_fu_753_p2 <= "1" when (tmp_26_reg_938 = ap_const_lv2_2) else "0";
    tmp18_fu_653_p2 <= std_logic_vector(unsigned(k_cast_fu_635_p1) + unsigned(tmp_9_cast_reg_873));
        tmp_10_fu_391_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_7_fu_381_p4),4));

    tmp_12_fu_683_p2 <= std_logic_vector(unsigned(indvars_iv_cast1_reg_863) + unsigned(i_off_reg_824));
        tmp_13_fu_687_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_12_reg_912),64));

    tmp_14_fu_643_p2 <= std_logic_vector(unsigned(i_off_reg_824) + unsigned(k_cast1_fu_639_p1));
        tmp_15_fu_648_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_14_fu_643_p2),64));

    tmp_16_fu_678_p1 <= tmp_17_neg_fu_672_p2;
    tmp_17_fu_658_p2 <= std_logic_vector(unsigned(tmp18_fu_653_p2) + unsigned(j_sub1_cast20_cast_reg_868));
    tmp_17_neg_fu_672_p2 <= (tmp_17_to_int_fu_668_p1 xor ap_const_lv32_80000000);
    tmp_17_to_int_fu_668_p1 <= L_internal_q0;
        tmp_18_fu_663_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_17_fu_658_p2),64));

    tmp_19_fu_405_p4 <= tmp_s_fu_361_p2(3 downto 1);
        tmp_1_cast_fu_431_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_4_fu_423_p3),6));

        tmp_20_fu_415_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_19_fu_405_p4),4));

    tmp_21_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_449_p3),6));
    tmp_21_fu_461_p2 <= std_logic_vector(unsigned(tmp_2_cast_fu_445_p1) + unsigned(tmp_21_cast_fu_457_p1));
    tmp_22_cast_fu_467_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_21_fu_461_p2),64));
    tmp_22_fu_695_p4 <= A_minus_sum_to_int_fu_691_p1(30 downto 23);
    tmp_23_fu_721_p2 <= (notrhs_fu_715_p2 or notlhs_fu_709_p2);
    tmp_25_fu_727_p2 <= (tmp_24_fu_313_p2 and tmp_23_fu_721_p2);
    tmp_26_fu_741_p1 <= indvars_iv1_reg_205(2 - 1 downto 0);
    tmp_27_fu_542_p3 <= tmp_8_fu_536_p2(2 downto 2);
    tmp_28_fu_556_p4 <= p_neg1_fu_550_p2(2 downto 1);
        tmp_29_fu_566_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_28_fu_556_p4),3));

    tmp_2_cast1_fu_441_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv1_reg_205),5));
    tmp_2_cast_fu_445_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(indvars_iv1_reg_205),6));
    tmp_2_fu_367_p3 <= tmp_s_fu_361_p2(3 downto 3);
    tmp_30_fu_580_p4 <= tmp_8_fu_536_p2(2 downto 1);
        tmp_31_fu_590_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_30_fu_580_p4),3));

    tmp_32_fu_489_p3 <= (indvars_iv_reg_229 & ap_const_lv2_0);
    tmp_33_fu_501_p2 <= std_logic_vector(unsigned(tmp_2_cast1_reg_830) + unsigned(tmp_34_cast_fu_497_p1));
    tmp_34_cast_fu_497_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_32_fu_489_p3),5));
    tmp_34_fu_610_p3 <= (indvars_iv1_reg_205 & indvars_iv_reg_229);
    tmp_35_cast_fu_506_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_33_fu_501_p2),64));
    tmp_35_fu_618_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_34_fu_610_p3),64));
    tmp_4_fu_423_p3 <= 
        p_neg_t_fu_399_p2 when (tmp_2_fu_367_p3(0) = '1') else 
        p_lshr_f_fu_419_p1;
    tmp_6_fu_598_p3 <= 
        p_neg_t1_fu_574_p2 when (tmp_27_fu_542_p3(0) = '1') else 
        p_lshr_f1_fu_594_p1;
    tmp_7_cast_fu_530_p0 <= j_sub1_cast_fu_526_p1(2 - 1 downto 0);
    tmp_7_cast_fu_530_p1 <= j_sub1_cast_fu_526_p1(2 - 1 downto 0);
    tmp_7_cast_fu_530_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_7_cast_fu_530_p0) * signed(tmp_7_cast_fu_530_p1))), 3));
    tmp_7_fu_381_p4 <= p_neg_fu_375_p2(3 downto 1);
    tmp_8_fu_536_p2 <= std_logic_vector(unsigned(tmp_7_cast_fu_530_p2) - unsigned(j_sub1_cast_fu_526_p1));
        tmp_9_cast_fu_606_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_6_fu_598_p3),5));

    tmp_9_fu_705_p1 <= A_minus_sum_to_int_fu_691_p1(23 - 1 downto 0);
    tmp_cast_fu_355_p0 <= i_sub1_cast_fu_351_p1(3 - 1 downto 0);
    tmp_cast_fu_355_p1 <= i_sub1_cast_fu_351_p1(3 - 1 downto 0);
    tmp_cast_fu_355_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_cast_fu_355_p0) * signed(tmp_cast_fu_355_p1))), 4));
    tmp_fu_449_p3 <= (indvars_iv1_reg_205 & ap_const_lv2_0);
    tmp_s_fu_361_p2 <= std_logic_vector(unsigned(tmp_cast_fu_355_p2) - unsigned(i_sub1_cast_fu_351_p1));
end behav;
