-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity cholesky_inverse_top_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    A_ce0 : OUT STD_LOGIC;
    A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    InverseA_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    InverseA_ce0 : OUT STD_LOGIC;
    InverseA_we0 : OUT STD_LOGIC;
    InverseA_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of cholesky_inverse_top_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (5 downto 0) := "000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (5 downto 0) := "001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (5 downto 0) := "010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (5 downto 0) := "100000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_start : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal grp_cholesky_alt4_fu_28_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal grp_cholesky_alt4_fu_28_ap_idle : STD_LOGIC;
    signal grp_cholesky_alt4_fu_28_ap_ready : STD_LOGIC;
    signal grp_cholesky_alt4_fu_28_ap_done : STD_LOGIC;
    signal U_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_ce0 : STD_LOGIC;
    signal U_we0 : STD_LOGIC;
    signal U_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_inv_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_inv_ce0 : STD_LOGIC;
    signal U_inv_we0 : STD_LOGIC;
    signal U_inv_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal U_inv_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal U_inv_ce1 : STD_LOGIC;
    signal U_inv_we1 : STD_LOGIC;
    signal U_inv_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cholesky_alt4_fu_28_ap_start : STD_LOGIC;
    signal grp_cholesky_alt4_fu_28_A_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cholesky_alt4_fu_28_A_ce0 : STD_LOGIC;
    signal grp_cholesky_alt4_fu_28_L_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_cholesky_alt4_fu_28_L_ce0 : STD_LOGIC;
    signal grp_cholesky_alt4_fu_28_L_we0 : STD_LOGIC;
    signal grp_cholesky_alt4_fu_28_L_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_back_substitute_alt_fu_36_ap_start : STD_LOGIC;
    signal grp_back_substitute_alt_fu_36_ap_done : STD_LOGIC;
    signal grp_back_substitute_alt_fu_36_ap_idle : STD_LOGIC;
    signal grp_back_substitute_alt_fu_36_ap_ready : STD_LOGIC;
    signal grp_back_substitute_alt_fu_36_A_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_back_substitute_alt_fu_36_A_ce0 : STD_LOGIC;
    signal grp_back_substitute_alt_fu_36_B_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_back_substitute_alt_fu_36_B_ce0 : STD_LOGIC;
    signal grp_back_substitute_alt_fu_36_B_we0 : STD_LOGIC;
    signal grp_back_substitute_alt_fu_36_B_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_back_substitute_alt_fu_36_B_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_back_substitute_alt_fu_36_B_ce1 : STD_LOGIC;
    signal grp_back_substitute_alt_fu_36_B_we1 : STD_LOGIC;
    signal grp_back_substitute_alt_fu_36_B_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_matrix_multiply_alt2_fu_42_ap_start : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_42_ap_done : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_42_ap_idle : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_42_ap_ready : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_42_A_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_multiply_alt2_fu_42_A_ce0 : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_42_A_address1 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_multiply_alt2_fu_42_A_ce1 : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_42_C_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_matrix_multiply_alt2_fu_42_C_ce0 : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_42_C_we0 : STD_LOGIC;
    signal grp_matrix_multiply_alt2_fu_42_C_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_cholesky_alt4_fu_28_ap_start_reg : STD_LOGIC := '0';
    signal grp_back_substitute_alt_fu_36_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal grp_matrix_multiply_alt2_fu_42_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_return : STD_LOGIC_VECTOR (31 downto 0);

    component cholesky_alt4 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        L_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        L_ce0 : OUT STD_LOGIC;
        L_we0 : OUT STD_LOGIC;
        L_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component back_substitute_alt IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_ce0 : OUT STD_LOGIC;
        B_we0 : OUT STD_LOGIC;
        B_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        B_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        B_ce1 : OUT STD_LOGIC;
        B_we1 : OUT STD_LOGIC;
        B_d1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matrix_multiply_alt2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        A_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_ce0 : OUT STD_LOGIC;
        A_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        A_address1 : OUT STD_LOGIC_VECTOR (3 downto 0);
        A_ce1 : OUT STD_LOGIC;
        A_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        C_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
        C_ce0 : OUT STD_LOGIC;
        C_we0 : OUT STD_LOGIC;
        C_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cholesky_inverse_mb6 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component cholesky_inverse_ncg IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    U_U : component cholesky_inverse_mb6
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => U_address0,
        ce0 => U_ce0,
        we0 => U_we0,
        d0 => grp_cholesky_alt4_fu_28_L_d0,
        q0 => U_q0);

    U_inv_U : component cholesky_inverse_ncg
    generic map (
        DataWidth => 32,
        AddressRange => 16,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => U_inv_address0,
        ce0 => U_inv_ce0,
        we0 => U_inv_we0,
        d0 => grp_back_substitute_alt_fu_36_B_d0,
        q0 => U_inv_q0,
        address1 => U_inv_address1,
        ce1 => U_inv_ce1,
        we1 => U_inv_we1,
        d1 => grp_back_substitute_alt_fu_36_B_d1,
        q1 => U_inv_q1);

    grp_cholesky_alt4_fu_28 : component cholesky_alt4
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_cholesky_alt4_fu_28_ap_start,
        ap_done => grp_cholesky_alt4_fu_28_ap_done,
        ap_idle => grp_cholesky_alt4_fu_28_ap_idle,
        ap_ready => grp_cholesky_alt4_fu_28_ap_ready,
        A_address0 => grp_cholesky_alt4_fu_28_A_address0,
        A_ce0 => grp_cholesky_alt4_fu_28_A_ce0,
        A_q0 => A_q0,
        L_address0 => grp_cholesky_alt4_fu_28_L_address0,
        L_ce0 => grp_cholesky_alt4_fu_28_L_ce0,
        L_we0 => grp_cholesky_alt4_fu_28_L_we0,
        L_d0 => grp_cholesky_alt4_fu_28_L_d0,
        ap_return => grp_cholesky_alt4_fu_28_ap_return);

    grp_back_substitute_alt_fu_36 : component back_substitute_alt
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_back_substitute_alt_fu_36_ap_start,
        ap_done => grp_back_substitute_alt_fu_36_ap_done,
        ap_idle => grp_back_substitute_alt_fu_36_ap_idle,
        ap_ready => grp_back_substitute_alt_fu_36_ap_ready,
        A_address0 => grp_back_substitute_alt_fu_36_A_address0,
        A_ce0 => grp_back_substitute_alt_fu_36_A_ce0,
        A_q0 => U_q0,
        B_address0 => grp_back_substitute_alt_fu_36_B_address0,
        B_ce0 => grp_back_substitute_alt_fu_36_B_ce0,
        B_we0 => grp_back_substitute_alt_fu_36_B_we0,
        B_d0 => grp_back_substitute_alt_fu_36_B_d0,
        B_address1 => grp_back_substitute_alt_fu_36_B_address1,
        B_ce1 => grp_back_substitute_alt_fu_36_B_ce1,
        B_we1 => grp_back_substitute_alt_fu_36_B_we1,
        B_d1 => grp_back_substitute_alt_fu_36_B_d1);

    grp_matrix_multiply_alt2_fu_42 : component matrix_multiply_alt2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_matrix_multiply_alt2_fu_42_ap_start,
        ap_done => grp_matrix_multiply_alt2_fu_42_ap_done,
        ap_idle => grp_matrix_multiply_alt2_fu_42_ap_idle,
        ap_ready => grp_matrix_multiply_alt2_fu_42_ap_ready,
        A_address0 => grp_matrix_multiply_alt2_fu_42_A_address0,
        A_ce0 => grp_matrix_multiply_alt2_fu_42_A_ce0,
        A_q0 => U_inv_q0,
        A_address1 => grp_matrix_multiply_alt2_fu_42_A_address1,
        A_ce1 => grp_matrix_multiply_alt2_fu_42_A_ce1,
        A_q1 => U_inv_q1,
        C_address0 => grp_matrix_multiply_alt2_fu_42_C_address0,
        C_ce0 => grp_matrix_multiply_alt2_fu_42_C_ce0,
        C_we0 => grp_matrix_multiply_alt2_fu_42_C_we0,
        C_d0 => grp_matrix_multiply_alt2_fu_42_C_d0);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_back_substitute_alt_fu_36_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_back_substitute_alt_fu_36_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                    grp_back_substitute_alt_fu_36_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_back_substitute_alt_fu_36_ap_ready = ap_const_logic_1)) then 
                    grp_back_substitute_alt_fu_36_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_cholesky_alt4_fu_28_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_cholesky_alt4_fu_28_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                    grp_cholesky_alt4_fu_28_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_cholesky_alt4_fu_28_ap_ready = ap_const_logic_1)) then 
                    grp_cholesky_alt4_fu_28_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_matrix_multiply_alt2_fu_42_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_matrix_multiply_alt2_fu_42_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                    grp_matrix_multiply_alt2_fu_42_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_matrix_multiply_alt2_fu_42_ap_ready = ap_const_logic_1)) then 
                    grp_matrix_multiply_alt2_fu_42_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, grp_cholesky_alt4_fu_28_ap_done, grp_back_substitute_alt_fu_36_ap_done, grp_matrix_multiply_alt2_fu_42_ap_done, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_cholesky_alt4_fu_28_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((grp_back_substitute_alt_fu_36_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (grp_matrix_multiply_alt2_fu_42_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXX";
        end case;
    end process;
    A_address0 <= grp_cholesky_alt4_fu_28_A_address0;
    A_ce0 <= grp_cholesky_alt4_fu_28_A_ce0;
    InverseA_address0 <= grp_matrix_multiply_alt2_fu_42_C_address0;
    InverseA_ce0 <= grp_matrix_multiply_alt2_fu_42_C_ce0;
    InverseA_d0 <= grp_matrix_multiply_alt2_fu_42_C_d0;
    InverseA_we0 <= grp_matrix_multiply_alt2_fu_42_C_we0;

    U_address0_assign_proc : process(ap_CS_fsm_state2, grp_cholesky_alt4_fu_28_L_address0, grp_back_substitute_alt_fu_36_A_address0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_address0 <= grp_back_substitute_alt_fu_36_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            U_address0 <= grp_cholesky_alt4_fu_28_L_address0;
        else 
            U_address0 <= "XXXX";
        end if; 
    end process;


    U_ce0_assign_proc : process(ap_CS_fsm_state2, grp_cholesky_alt4_fu_28_L_ce0, grp_back_substitute_alt_fu_36_A_ce0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_ce0 <= grp_back_substitute_alt_fu_36_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            U_ce0 <= grp_cholesky_alt4_fu_28_L_ce0;
        else 
            U_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_inv_address0_assign_proc : process(grp_back_substitute_alt_fu_36_B_address0, grp_matrix_multiply_alt2_fu_42_A_address0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            U_inv_address0 <= grp_matrix_multiply_alt2_fu_42_A_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_inv_address0 <= grp_back_substitute_alt_fu_36_B_address0;
        else 
            U_inv_address0 <= "XXXX";
        end if; 
    end process;


    U_inv_address1_assign_proc : process(grp_back_substitute_alt_fu_36_B_address1, grp_matrix_multiply_alt2_fu_42_A_address1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            U_inv_address1 <= grp_matrix_multiply_alt2_fu_42_A_address1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_inv_address1 <= grp_back_substitute_alt_fu_36_B_address1;
        else 
            U_inv_address1 <= "XXXX";
        end if; 
    end process;


    U_inv_ce0_assign_proc : process(grp_back_substitute_alt_fu_36_B_ce0, grp_matrix_multiply_alt2_fu_42_A_ce0, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            U_inv_ce0 <= grp_matrix_multiply_alt2_fu_42_A_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_inv_ce0 <= grp_back_substitute_alt_fu_36_B_ce0;
        else 
            U_inv_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    U_inv_ce1_assign_proc : process(grp_back_substitute_alt_fu_36_B_ce1, grp_matrix_multiply_alt2_fu_42_A_ce1, ap_CS_fsm_state4, ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            U_inv_ce1 <= grp_matrix_multiply_alt2_fu_42_A_ce1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_inv_ce1 <= grp_back_substitute_alt_fu_36_B_ce1;
        else 
            U_inv_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    U_inv_we0_assign_proc : process(grp_back_substitute_alt_fu_36_B_we0, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_inv_we0 <= grp_back_substitute_alt_fu_36_B_we0;
        else 
            U_inv_we0 <= ap_const_logic_0;
        end if; 
    end process;


    U_inv_we1_assign_proc : process(grp_back_substitute_alt_fu_36_B_we1, ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            U_inv_we1 <= grp_back_substitute_alt_fu_36_B_we1;
        else 
            U_inv_we1 <= ap_const_logic_0;
        end if; 
    end process;


    U_we0_assign_proc : process(ap_CS_fsm_state2, grp_cholesky_alt4_fu_28_L_we0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            U_we0 <= grp_cholesky_alt4_fu_28_L_we0;
        else 
            U_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_start <= ap_const_logic_1;
    grp_back_substitute_alt_fu_36_ap_start <= grp_back_substitute_alt_fu_36_ap_start_reg;
    grp_cholesky_alt4_fu_28_ap_start <= grp_cholesky_alt4_fu_28_ap_start_reg;
    grp_matrix_multiply_alt2_fu_42_ap_start <= grp_matrix_multiply_alt2_fu_42_ap_start_reg;
end behav;
