// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module cholesky_inverse_top_2 (
        ap_clk,
        ap_rst,
        A_address0,
        A_ce0,
        A_q0,
        InverseA_address0,
        InverseA_ce0,
        InverseA_we0,
        InverseA_d0
);

parameter    ap_ST_fsm_state1 = 6'd1;
parameter    ap_ST_fsm_state2 = 6'd2;
parameter    ap_ST_fsm_state3 = 6'd4;
parameter    ap_ST_fsm_state4 = 6'd8;
parameter    ap_ST_fsm_state5 = 6'd16;
parameter    ap_ST_fsm_state6 = 6'd32;

input   ap_clk;
input   ap_rst;
output  [3:0] A_address0;
output   A_ce0;
input  [31:0] A_q0;
output  [3:0] InverseA_address0;
output   InverseA_ce0;
output   InverseA_we0;
output  [31:0] InverseA_d0;

wire    ap_start;
(* fsm_encoding = "none" *) reg   [5:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [31:0] grp_cholesky_alt4_fu_28_ap_return;
wire    ap_CS_fsm_state2;
wire    grp_cholesky_alt4_fu_28_ap_idle;
wire    grp_cholesky_alt4_fu_28_ap_ready;
wire    grp_cholesky_alt4_fu_28_ap_done;
reg   [3:0] U_address0;
reg    U_ce0;
reg    U_we0;
wire   [31:0] U_q0;
reg   [3:0] U_inv_address0;
reg    U_inv_ce0;
reg    U_inv_we0;
wire   [31:0] U_inv_q0;
reg   [3:0] U_inv_address1;
reg    U_inv_ce1;
reg    U_inv_we1;
wire   [31:0] U_inv_q1;
wire    grp_cholesky_alt4_fu_28_ap_start;
wire   [3:0] grp_cholesky_alt4_fu_28_A_address0;
wire    grp_cholesky_alt4_fu_28_A_ce0;
wire   [3:0] grp_cholesky_alt4_fu_28_L_address0;
wire    grp_cholesky_alt4_fu_28_L_ce0;
wire    grp_cholesky_alt4_fu_28_L_we0;
wire   [31:0] grp_cholesky_alt4_fu_28_L_d0;
wire    grp_back_substitute_alt_fu_36_ap_start;
wire    grp_back_substitute_alt_fu_36_ap_done;
wire    grp_back_substitute_alt_fu_36_ap_idle;
wire    grp_back_substitute_alt_fu_36_ap_ready;
wire   [3:0] grp_back_substitute_alt_fu_36_A_address0;
wire    grp_back_substitute_alt_fu_36_A_ce0;
wire   [3:0] grp_back_substitute_alt_fu_36_B_address0;
wire    grp_back_substitute_alt_fu_36_B_ce0;
wire    grp_back_substitute_alt_fu_36_B_we0;
wire   [31:0] grp_back_substitute_alt_fu_36_B_d0;
wire   [3:0] grp_back_substitute_alt_fu_36_B_address1;
wire    grp_back_substitute_alt_fu_36_B_ce1;
wire    grp_back_substitute_alt_fu_36_B_we1;
wire   [31:0] grp_back_substitute_alt_fu_36_B_d1;
wire    grp_matrix_multiply_alt2_fu_42_ap_start;
wire    grp_matrix_multiply_alt2_fu_42_ap_done;
wire    grp_matrix_multiply_alt2_fu_42_ap_idle;
wire    grp_matrix_multiply_alt2_fu_42_ap_ready;
wire   [3:0] grp_matrix_multiply_alt2_fu_42_A_address0;
wire    grp_matrix_multiply_alt2_fu_42_A_ce0;
wire   [3:0] grp_matrix_multiply_alt2_fu_42_A_address1;
wire    grp_matrix_multiply_alt2_fu_42_A_ce1;
wire   [3:0] grp_matrix_multiply_alt2_fu_42_C_address0;
wire    grp_matrix_multiply_alt2_fu_42_C_ce0;
wire    grp_matrix_multiply_alt2_fu_42_C_we0;
wire   [31:0] grp_matrix_multiply_alt2_fu_42_C_d0;
reg    grp_cholesky_alt4_fu_28_ap_start_reg;
reg    grp_back_substitute_alt_fu_36_ap_start_reg;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
reg    grp_matrix_multiply_alt2_fu_42_ap_start_reg;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
reg   [5:0] ap_NS_fsm;
wire    ap_ready;
wire    ap_done;
wire    ap_idle;
wire   [31:0] ap_return;

// power-on initialization
initial begin
#0 ap_CS_fsm = 6'd1;
#0 grp_cholesky_alt4_fu_28_ap_start_reg = 1'b0;
#0 grp_back_substitute_alt_fu_36_ap_start_reg = 1'b0;
#0 grp_matrix_multiply_alt2_fu_42_ap_start_reg = 1'b0;
end

cholesky_inverse_mb6 #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
U_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(U_address0),
    .ce0(U_ce0),
    .we0(U_we0),
    .d0(grp_cholesky_alt4_fu_28_L_d0),
    .q0(U_q0)
);

cholesky_inverse_ncg #(
    .DataWidth( 32 ),
    .AddressRange( 16 ),
    .AddressWidth( 4 ))
U_inv_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(U_inv_address0),
    .ce0(U_inv_ce0),
    .we0(U_inv_we0),
    .d0(grp_back_substitute_alt_fu_36_B_d0),
    .q0(U_inv_q0),
    .address1(U_inv_address1),
    .ce1(U_inv_ce1),
    .we1(U_inv_we1),
    .d1(grp_back_substitute_alt_fu_36_B_d1),
    .q1(U_inv_q1)
);

cholesky_alt4 grp_cholesky_alt4_fu_28(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_cholesky_alt4_fu_28_ap_start),
    .ap_done(grp_cholesky_alt4_fu_28_ap_done),
    .ap_idle(grp_cholesky_alt4_fu_28_ap_idle),
    .ap_ready(grp_cholesky_alt4_fu_28_ap_ready),
    .A_address0(grp_cholesky_alt4_fu_28_A_address0),
    .A_ce0(grp_cholesky_alt4_fu_28_A_ce0),
    .A_q0(A_q0),
    .L_address0(grp_cholesky_alt4_fu_28_L_address0),
    .L_ce0(grp_cholesky_alt4_fu_28_L_ce0),
    .L_we0(grp_cholesky_alt4_fu_28_L_we0),
    .L_d0(grp_cholesky_alt4_fu_28_L_d0),
    .ap_return(grp_cholesky_alt4_fu_28_ap_return)
);

back_substitute_alt grp_back_substitute_alt_fu_36(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_back_substitute_alt_fu_36_ap_start),
    .ap_done(grp_back_substitute_alt_fu_36_ap_done),
    .ap_idle(grp_back_substitute_alt_fu_36_ap_idle),
    .ap_ready(grp_back_substitute_alt_fu_36_ap_ready),
    .A_address0(grp_back_substitute_alt_fu_36_A_address0),
    .A_ce0(grp_back_substitute_alt_fu_36_A_ce0),
    .A_q0(U_q0),
    .B_address0(grp_back_substitute_alt_fu_36_B_address0),
    .B_ce0(grp_back_substitute_alt_fu_36_B_ce0),
    .B_we0(grp_back_substitute_alt_fu_36_B_we0),
    .B_d0(grp_back_substitute_alt_fu_36_B_d0),
    .B_address1(grp_back_substitute_alt_fu_36_B_address1),
    .B_ce1(grp_back_substitute_alt_fu_36_B_ce1),
    .B_we1(grp_back_substitute_alt_fu_36_B_we1),
    .B_d1(grp_back_substitute_alt_fu_36_B_d1)
);

matrix_multiply_alt2 grp_matrix_multiply_alt2_fu_42(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_matrix_multiply_alt2_fu_42_ap_start),
    .ap_done(grp_matrix_multiply_alt2_fu_42_ap_done),
    .ap_idle(grp_matrix_multiply_alt2_fu_42_ap_idle),
    .ap_ready(grp_matrix_multiply_alt2_fu_42_ap_ready),
    .A_address0(grp_matrix_multiply_alt2_fu_42_A_address0),
    .A_ce0(grp_matrix_multiply_alt2_fu_42_A_ce0),
    .A_q0(U_inv_q0),
    .A_address1(grp_matrix_multiply_alt2_fu_42_A_address1),
    .A_ce1(grp_matrix_multiply_alt2_fu_42_A_ce1),
    .A_q1(U_inv_q1),
    .C_address0(grp_matrix_multiply_alt2_fu_42_C_address0),
    .C_ce0(grp_matrix_multiply_alt2_fu_42_C_ce0),
    .C_we0(grp_matrix_multiply_alt2_fu_42_C_we0),
    .C_d0(grp_matrix_multiply_alt2_fu_42_C_d0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_back_substitute_alt_fu_36_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state3)) begin
            grp_back_substitute_alt_fu_36_ap_start_reg <= 1'b1;
        end else if ((grp_back_substitute_alt_fu_36_ap_ready == 1'b1)) begin
            grp_back_substitute_alt_fu_36_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_cholesky_alt4_fu_28_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
            grp_cholesky_alt4_fu_28_ap_start_reg <= 1'b1;
        end else if ((grp_cholesky_alt4_fu_28_ap_ready == 1'b1)) begin
            grp_cholesky_alt4_fu_28_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_matrix_multiply_alt2_fu_42_ap_start_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            grp_matrix_multiply_alt2_fu_42_ap_start_reg <= 1'b1;
        end else if ((grp_matrix_multiply_alt2_fu_42_ap_ready == 1'b1)) begin
            grp_matrix_multiply_alt2_fu_42_ap_start_reg <= 1'b0;
        end
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        U_address0 = grp_back_substitute_alt_fu_36_A_address0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        U_address0 = grp_cholesky_alt4_fu_28_L_address0;
    end else begin
        U_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        U_ce0 = grp_back_substitute_alt_fu_36_A_ce0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        U_ce0 = grp_cholesky_alt4_fu_28_L_ce0;
    end else begin
        U_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        U_inv_address0 = grp_matrix_multiply_alt2_fu_42_A_address0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        U_inv_address0 = grp_back_substitute_alt_fu_36_B_address0;
    end else begin
        U_inv_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        U_inv_address1 = grp_matrix_multiply_alt2_fu_42_A_address1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        U_inv_address1 = grp_back_substitute_alt_fu_36_B_address1;
    end else begin
        U_inv_address1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        U_inv_ce0 = grp_matrix_multiply_alt2_fu_42_A_ce0;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        U_inv_ce0 = grp_back_substitute_alt_fu_36_B_ce0;
    end else begin
        U_inv_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        U_inv_ce1 = grp_matrix_multiply_alt2_fu_42_A_ce1;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        U_inv_ce1 = grp_back_substitute_alt_fu_36_B_ce1;
    end else begin
        U_inv_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        U_inv_we0 = grp_back_substitute_alt_fu_36_B_we0;
    end else begin
        U_inv_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        U_inv_we1 = grp_back_substitute_alt_fu_36_B_we1;
    end else begin
        U_inv_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        U_we0 = grp_cholesky_alt4_fu_28_L_we0;
    end else begin
        U_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((grp_cholesky_alt4_fu_28_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((grp_back_substitute_alt_fu_36_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (grp_matrix_multiply_alt2_fu_42_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign A_address0 = grp_cholesky_alt4_fu_28_A_address0;

assign A_ce0 = grp_cholesky_alt4_fu_28_A_ce0;

assign InverseA_address0 = grp_matrix_multiply_alt2_fu_42_C_address0;

assign InverseA_ce0 = grp_matrix_multiply_alt2_fu_42_C_ce0;

assign InverseA_d0 = grp_matrix_multiply_alt2_fu_42_C_d0;

assign InverseA_we0 = grp_matrix_multiply_alt2_fu_42_C_we0;

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_start = 1'b1;

assign grp_back_substitute_alt_fu_36_ap_start = grp_back_substitute_alt_fu_36_ap_start_reg;

assign grp_cholesky_alt4_fu_28_ap_start = grp_cholesky_alt4_fu_28_ap_start_reg;

assign grp_matrix_multiply_alt2_fu_42_ap_start = grp_matrix_multiply_alt2_fu_42_ap_start_reg;

endmodule //cholesky_inverse_top_2
